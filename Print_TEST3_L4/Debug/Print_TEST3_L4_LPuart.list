
Print_TEST3_L4_LPuart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004444  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080045f4  080045f4  000145f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004698  08004698  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046a0  080046a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046a0  080046a0  000146a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046a4  080046a4  000146a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  20000070  08004718  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  08004718  00020634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101ef  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ae  00000000  00000000  0003028f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00032640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00033338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002862a  00000000  00000000  00033f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2a3  00000000  00000000  0005c572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8581  00000000  00000000  0006b815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163d96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d8  00000000  00000000  00163de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080045dc 	.word	0x080045dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080045dc 	.word	0x080045dc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int pes = 4574;
 80005aa:	f241 13de 	movw	r3, #4574	; 0x11de
 80005ae:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fb59 	bl	8000c66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f816 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f8d2 	bl	8000760 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005bc:	f000 f876 	bl	80006ac <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c0:	f000 f8a0 	bl	8000704 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  myPrint("smooth \n\r");
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <main+0x38>)
 80005c6:	f000 fafb 	bl	8000bc0 <myPrint>
	  myPrint("%d a very big hairy ass \n\r", pes);
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <main+0x3c>)
 80005ce:	f000 faf7 	bl	8000bc0 <myPrint>
	  pes++;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3301      	adds	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
	  myPrint("smooth \n\r");
 80005d8:	e7f4      	b.n	80005c4 <main+0x20>
 80005da:	bf00      	nop
 80005dc:	080045f4 	.word	0x080045f4
 80005e0:	08004600 	.word	0x08004600

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b096      	sub	sp, #88	; 0x58
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2244      	movs	r2, #68	; 0x44
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fb7c 	bl	8003cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000606:	f44f 7000 	mov.w	r0, #512	; 0x200
 800060a:	f000 ffbb 	bl	8001584 <HAL_PWREx_ControlVoltageScaling>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000614:	f000 f93c 	bl	8000890 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000618:	f000 ff96 	bl	8001548 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xc4>)
 800061e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000622:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <SystemClock_Config+0xc4>)
 8000624:	f023 0318 	bic.w	r3, r3, #24
 8000628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800062c:	2314      	movs	r3, #20
 800062e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800063c:	2360      	movs	r3, #96	; 0x60
 800063e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000644:	2301      	movs	r3, #1
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 800064c:	2347      	movs	r3, #71	; 0x47
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000658:	2306      	movs	r3, #6
 800065a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4618      	mov	r0, r3
 8000662:	f001 f805 	bl	8001670 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800066c:	f000 f910 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2303      	movs	r3, #3
 8000676:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fc0a 	bl	8001ea4 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000696:	f000 f8fb 	bl	8000890 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800069a:	f002 f923 	bl	80028e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800069e:	bf00      	nop
 80006a0:	3758      	adds	r7, #88	; 0x58
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_LPUART1_UART_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006ea:	f002 fad9 	bl	8002ca0 <HAL_UART_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 f8cc 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000008c 	.word	0x2000008c
 8000700:	40008000 	.word	0x40008000

08000704 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800070e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000712:	2206      	movs	r2, #6
 8000714:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000718:	2202      	movs	r2, #2
 800071a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	2202      	movs	r2, #2
 8000720:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000724:	2201      	movs	r2, #1
 8000726:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000736:	2201      	movs	r2, #1
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000742:	2201      	movs	r2, #1
 8000744:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000748:	f000 fdb6 	bl	80012b8 <HAL_PCD_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f89d 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000110 	.word	0x20000110

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b42      	ldr	r3, [pc, #264]	; (8000880 <MX_GPIO_Init+0x120>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a41      	ldr	r2, [pc, #260]	; (8000880 <MX_GPIO_Init+0x120>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b3f      	ldr	r3, [pc, #252]	; (8000880 <MX_GPIO_Init+0x120>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	4b3c      	ldr	r3, [pc, #240]	; (8000880 <MX_GPIO_Init+0x120>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a3b      	ldr	r2, [pc, #236]	; (8000880 <MX_GPIO_Init+0x120>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b39      	ldr	r3, [pc, #228]	; (8000880 <MX_GPIO_Init+0x120>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b36      	ldr	r3, [pc, #216]	; (8000880 <MX_GPIO_Init+0x120>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a35      	ldr	r2, [pc, #212]	; (8000880 <MX_GPIO_Init+0x120>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b33      	ldr	r3, [pc, #204]	; (8000880 <MX_GPIO_Init+0x120>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007be:	4b30      	ldr	r3, [pc, #192]	; (8000880 <MX_GPIO_Init+0x120>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a2f      	ldr	r2, [pc, #188]	; (8000880 <MX_GPIO_Init+0x120>)
 80007c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_GPIO_Init+0x120>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80007d6:	f000 ff3b 	bl	8001650 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b29      	ldr	r3, [pc, #164]	; (8000880 <MX_GPIO_Init+0x120>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a28      	ldr	r2, [pc, #160]	; (8000880 <MX_GPIO_Init+0x120>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <MX_GPIO_Init+0x120>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007f8:	4822      	ldr	r0, [pc, #136]	; (8000884 <MX_GPIO_Init+0x124>)
 80007fa:	f000 fd45 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	4821      	ldr	r0, [pc, #132]	; (8000888 <MX_GPIO_Init+0x128>)
 8000804:	f000 fd40 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	481b      	ldr	r0, [pc, #108]	; (800088c <MX_GPIO_Init+0x12c>)
 8000820:	f000 fba0 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000824:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	4811      	ldr	r0, [pc, #68]	; (8000884 <MX_GPIO_Init+0x124>)
 800083e:	f000 fb91 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000842:	2320      	movs	r3, #32
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_GPIO_Init+0x128>)
 8000856:	f000 fb85 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800085a:	2340      	movs	r3, #64	; 0x40
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_GPIO_Init+0x128>)
 8000872:	f000 fb77 	bl	8000f64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000
 8000884:	48000400 	.word	0x48000400
 8000888:	48001800 	.word	0x48001800
 800088c:	48000800 	.word	0x48000800

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_MspInit+0x44>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <HAL_MspInit+0x44>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6613      	str	r3, [r2, #96]	; 0x60
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_MspInit+0x44>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_MspInit+0x44>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_MspInit+0x44>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6593      	str	r3, [r2, #88]	; 0x58
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_MspInit+0x44>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0ac      	sub	sp, #176	; 0xb0
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	228c      	movs	r2, #140	; 0x8c
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f003 f9f3 	bl	8003cf0 <memset>
  if(huart->Instance==LPUART1)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a22      	ldr	r2, [pc, #136]	; (8000998 <HAL_UART_MspInit+0xb4>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d13d      	bne.n	8000990 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000914:	2320      	movs	r3, #32
 8000916:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000918:	2300      	movs	r3, #0
 800091a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fce3 	bl	80022ec <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800092c:	f7ff ffb0 	bl	8000890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <HAL_UART_MspInit+0xb8>)
 8000932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000934:	4a19      	ldr	r2, [pc, #100]	; (800099c <HAL_UART_MspInit+0xb8>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_UART_MspInit+0xb8>)
 800093e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_UART_MspInit+0xb8>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094c:	4a13      	ldr	r2, [pc, #76]	; (800099c <HAL_UART_MspInit+0xb8>)
 800094e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_UART_MspInit+0xb8>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000960:	f000 fe76 	bl	8001650 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000964:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800097e:	2308      	movs	r3, #8
 8000980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000984:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000988:	4619      	mov	r1, r3
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <HAL_UART_MspInit+0xbc>)
 800098c:	f000 faea 	bl	8000f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000990:	bf00      	nop
 8000992:	37b0      	adds	r7, #176	; 0xb0
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40008000 	.word	0x40008000
 800099c:	40021000 	.word	0x40021000
 80009a0:	48001800 	.word	0x48001800

080009a4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0ae      	sub	sp, #184	; 0xb8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009bc:	f107 0318 	add.w	r3, r7, #24
 80009c0:	228c      	movs	r2, #140	; 0x8c
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 f993 	bl	8003cf0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009d2:	d17c      	bne.n	8000ace <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80009d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80009da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80009de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80009ea:	2318      	movs	r3, #24
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80009fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a00:	f107 0318 	add.w	r3, r7, #24
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 fc71 	bl	80022ec <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000a10:	f7ff ff3e 	bl	8000890 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <HAL_PCD_MspInit+0x134>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a18:	4a2f      	ldr	r2, [pc, #188]	; (8000ad8 <HAL_PCD_MspInit+0x134>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a20:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <HAL_PCD_MspInit+0x134>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a2c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a46:	230a      	movs	r3, #10
 8000a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a50:	4619      	mov	r1, r3
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a56:	f000 fa85 	bl	8000f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f000 fa74 	bl	8000f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HAL_PCD_MspInit+0x134>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a80:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <HAL_PCD_MspInit+0x134>)
 8000a82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <HAL_PCD_MspInit+0x134>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_PCD_MspInit+0x134>)
 8000a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d114      	bne.n	8000aca <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <HAL_PCD_MspInit+0x134>)
 8000aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	; (8000ad8 <HAL_PCD_MspInit+0x134>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_PCD_MspInit+0x134>)
 8000aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000ab8:	f000 fdba 	bl	8001630 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_PCD_MspInit+0x134>)
 8000abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac0:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <HAL_PCD_MspInit+0x134>)
 8000ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ac8:	e001      	b.n	8000ace <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8000aca:	f000 fdb1 	bl	8001630 <HAL_PWREx_EnableVddUSB>
}
 8000ace:	bf00      	nop
 8000ad0:	37b8      	adds	r7, #184	; 0xb8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <MemManage_Handler+0x4>

08000aee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b28:	f000 f8f2 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f003 f89c 	bl	8003c9c <__errno>
 8000b64:	4603      	mov	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <_sbrk+0x64>)
 8000b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20050000 	.word	0x20050000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	2000061c 	.word	0x2000061c
 8000b98:	20000638 	.word	0x20000638

08000b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <myPrint>:
#include <stdio.h>
#include <stdarg.h>
#include <string.h>


void myPrint(const char* paper, ...){
 8000bc0:	b40f      	push	{r0, r1, r2, r3}
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b0c2      	sub	sp, #264	; 0x108
 8000bc6:	af00      	add	r7, sp, #0
	va_list param;
	char result[256];

	va_start(param, paper);
 8000bc8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000bcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	vsprintf(result, paper, param);
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000bd6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 f8a6 	bl	8003d2c <vsiprintf>
	va_end(param);

	HAL_UART_Transmit(&hlpuart1, (uint8_t*)result, strlen(result), 100);
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fb04 	bl	80001f0 <strlen>
 8000be8:	4603      	mov	r3, r0
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	1d39      	adds	r1, r7, #4
 8000bee:	2364      	movs	r3, #100	; 0x64
 8000bf0:	4807      	ldr	r0, [pc, #28]	; (8000c10 <myPrint+0x50>)
 8000bf2:	f002 f8a3 	bl	8002d3c <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000bf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bfa:	f000 f8a9 	bl	8000d50 <HAL_Delay>
}
 8000bfe:	bf00      	nop
 8000c00:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000c04:	46bd      	mov	sp, r7
 8000c06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c0a:	b004      	add	sp, #16
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	2000008c 	.word	0x2000008c

08000c14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c18:	f7ff ffc0 	bl	8000b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1e:	490d      	ldr	r1, [pc, #52]	; (8000c54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <LoopForever+0xe>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c34:	4c0a      	ldr	r4, [pc, #40]	; (8000c60 <LoopForever+0x16>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c42:	f003 f831 	bl	8003ca8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c46:	f7ff fcad 	bl	80005a4 <main>

08000c4a <LoopForever>:

LoopForever:
    b LoopForever
 8000c4a:	e7fe      	b.n	8000c4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c58:	080046a8 	.word	0x080046a8
  ldr r2, =_sbss
 8000c5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c60:	20000634 	.word	0x20000634

08000c64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC1_2_IRQHandler>

08000c66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f943 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 f80e 	bl	8000c98 <HAL_InitTick>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	71fb      	strb	r3, [r7, #7]
 8000c86:	e001      	b.n	8000c8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c88:	f7ff fe08 	bl	800089c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_InitTick+0x6c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d023      	beq.n	8000cf4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_InitTick+0x70>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <HAL_InitTick+0x6c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f941 	bl	8000f4a <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d10f      	bne.n	8000cee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d809      	bhi.n	8000ce8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 f919 	bl	8000f12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_InitTick+0x74>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e007      	b.n	8000cf8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e004      	b.n	8000cf8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e001      	b.n	8000cf8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000004 	.word	0x20000004

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000620 	.word	0x20000620

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000620 	.word	0x20000620

08000d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d58:	f7ff ffee 	bl	8000d38 <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d68:	d005      	beq.n	8000d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_Delay+0x44>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d76:	bf00      	nop
 8000d78:	f7ff ffde 	bl	8000d38 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8f7      	bhi.n	8000d78 <HAL_Delay+0x28>
  {
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff47 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff5c 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff8e 	bl	8000e50 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5d 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffb0 	bl	8000eb8 <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f72:	e166      	b.n	8001242 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2101      	movs	r1, #1
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	4013      	ands	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 8158 	beq.w	800123c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d005      	beq.n	8000fa4 <HAL_GPIO_Init+0x40>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d130      	bne.n	8001006 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fda:	2201      	movs	r2, #1
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	f003 0201 	and.w	r2, r3, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b03      	cmp	r3, #3
 8001010:	d017      	beq.n	8001042 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d123      	bne.n	8001096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	691a      	ldr	r2, [r3, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	6939      	ldr	r1, [r7, #16]
 8001092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0203 	and.w	r2, r3, #3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 80b2 	beq.w	800123c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d8:	4b61      	ldr	r3, [pc, #388]	; (8001260 <HAL_GPIO_Init+0x2fc>)
 80010da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010dc:	4a60      	ldr	r2, [pc, #384]	; (8001260 <HAL_GPIO_Init+0x2fc>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6613      	str	r3, [r2, #96]	; 0x60
 80010e4:	4b5e      	ldr	r3, [pc, #376]	; (8001260 <HAL_GPIO_Init+0x2fc>)
 80010e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f0:	4a5c      	ldr	r2, [pc, #368]	; (8001264 <HAL_GPIO_Init+0x300>)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3302      	adds	r3, #2
 80010f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800111a:	d02b      	beq.n	8001174 <HAL_GPIO_Init+0x210>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a52      	ldr	r2, [pc, #328]	; (8001268 <HAL_GPIO_Init+0x304>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d025      	beq.n	8001170 <HAL_GPIO_Init+0x20c>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a51      	ldr	r2, [pc, #324]	; (800126c <HAL_GPIO_Init+0x308>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d01f      	beq.n	800116c <HAL_GPIO_Init+0x208>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a50      	ldr	r2, [pc, #320]	; (8001270 <HAL_GPIO_Init+0x30c>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d019      	beq.n	8001168 <HAL_GPIO_Init+0x204>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a4f      	ldr	r2, [pc, #316]	; (8001274 <HAL_GPIO_Init+0x310>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d013      	beq.n	8001164 <HAL_GPIO_Init+0x200>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a4e      	ldr	r2, [pc, #312]	; (8001278 <HAL_GPIO_Init+0x314>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d00d      	beq.n	8001160 <HAL_GPIO_Init+0x1fc>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a4d      	ldr	r2, [pc, #308]	; (800127c <HAL_GPIO_Init+0x318>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d007      	beq.n	800115c <HAL_GPIO_Init+0x1f8>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a4c      	ldr	r2, [pc, #304]	; (8001280 <HAL_GPIO_Init+0x31c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d101      	bne.n	8001158 <HAL_GPIO_Init+0x1f4>
 8001154:	2307      	movs	r3, #7
 8001156:	e00e      	b.n	8001176 <HAL_GPIO_Init+0x212>
 8001158:	2308      	movs	r3, #8
 800115a:	e00c      	b.n	8001176 <HAL_GPIO_Init+0x212>
 800115c:	2306      	movs	r3, #6
 800115e:	e00a      	b.n	8001176 <HAL_GPIO_Init+0x212>
 8001160:	2305      	movs	r3, #5
 8001162:	e008      	b.n	8001176 <HAL_GPIO_Init+0x212>
 8001164:	2304      	movs	r3, #4
 8001166:	e006      	b.n	8001176 <HAL_GPIO_Init+0x212>
 8001168:	2303      	movs	r3, #3
 800116a:	e004      	b.n	8001176 <HAL_GPIO_Init+0x212>
 800116c:	2302      	movs	r3, #2
 800116e:	e002      	b.n	8001176 <HAL_GPIO_Init+0x212>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <HAL_GPIO_Init+0x212>
 8001174:	2300      	movs	r3, #0
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	f002 0203 	and.w	r2, r2, #3
 800117c:	0092      	lsls	r2, r2, #2
 800117e:	4093      	lsls	r3, r2
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001186:	4937      	ldr	r1, [pc, #220]	; (8001264 <HAL_GPIO_Init+0x300>)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001194:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <HAL_GPIO_Init+0x320>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011b8:	4a32      	ldr	r2, [pc, #200]	; (8001284 <HAL_GPIO_Init+0x320>)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011be:	4b31      	ldr	r3, [pc, #196]	; (8001284 <HAL_GPIO_Init+0x320>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011e2:	4a28      	ldr	r2, [pc, #160]	; (8001284 <HAL_GPIO_Init+0x320>)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011e8:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_GPIO_Init+0x320>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_GPIO_Init+0x320>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <HAL_GPIO_Init+0x320>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001236:	4a13      	ldr	r2, [pc, #76]	; (8001284 <HAL_GPIO_Init+0x320>)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	f47f ae91 	bne.w	8000f74 <HAL_GPIO_Init+0x10>
  }
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000
 8001264:	40010000 	.word	0x40010000
 8001268:	48000400 	.word	0x48000400
 800126c:	48000800 	.word	0x48000800
 8001270:	48000c00 	.word	0x48000c00
 8001274:	48001000 	.word	0x48001000
 8001278:	48001400 	.word	0x48001400
 800127c:	48001800 	.word	0x48001800
 8001280:	48001c00 	.word	0x48001c00
 8001284:	40010400 	.word	0x40010400

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ba:	b08f      	sub	sp, #60	; 0x3c
 80012bc:	af0a      	add	r7, sp, #40	; 0x28
 80012be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e116      	b.n	80014f8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d106      	bne.n	80012ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff fb5d 	bl	80009a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2203      	movs	r2, #3
 80012ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f002 fa3e 	bl	800378a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	687e      	ldr	r6, [r7, #4]
 8001316:	466d      	mov	r5, sp
 8001318:	f106 0410 	add.w	r4, r6, #16
 800131c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001324:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001328:	e885 0003 	stmia.w	r5, {r0, r1}
 800132c:	1d33      	adds	r3, r6, #4
 800132e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001330:	6838      	ldr	r0, [r7, #0]
 8001332:	f002 f9fe 	bl	8003732 <USB_CoreInit>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0d7      	b.n	80014f8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f002 fa2c 	bl	80037ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e04a      	b.n	80013f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	333d      	adds	r3, #61	; 0x3d
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4413      	add	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	440b      	add	r3, r1
 800137c:	333c      	adds	r3, #60	; 0x3c
 800137e:	7bfa      	ldrb	r2, [r7, #15]
 8001380:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	b298      	uxth	r0, r3
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	3344      	adds	r3, #68	; 0x44
 8001396:	4602      	mov	r2, r0
 8001398:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	3340      	adds	r3, #64	; 0x40
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	3348      	adds	r3, #72	; 0x48
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	334c      	adds	r3, #76	; 0x4c
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	3354      	adds	r3, #84	; 0x54
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	3301      	adds	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d3af      	bcc.n	800135a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	e044      	b.n	800148a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	3301      	adds	r3, #1
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3b5      	bcc.n	8001400 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	687e      	ldr	r6, [r7, #4]
 800149c:	466d      	mov	r5, sp
 800149e:	f106 0410 	add.w	r4, r6, #16
 80014a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80014b2:	1d33      	adds	r3, r6, #4
 80014b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b6:	6838      	ldr	r0, [r7, #0]
 80014b8:	f002 f9c4 	bl	8003844 <USB_DevInit>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2202      	movs	r2, #2
 80014c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e014      	b.n	80014f8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d102      	bne.n	80014ec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f80a 	bl	8001500 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fb70 	bl	8003bd6 <USB_DevDisconnect>

  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001500 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001532:	f043 0303 	orr.w	r3, r3, #3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40007000 	.word	0x40007000

08001568 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_PWREx_GetVoltageRange+0x18>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40007000 	.word	0x40007000

08001584 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001592:	d130      	bne.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800159c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a0:	d038      	beq.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015aa:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2232      	movs	r2, #50	; 0x32
 80015b8:	fb02 f303 	mul.w	r3, r2, r3
 80015bc:	4a1b      	ldr	r2, [pc, #108]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	0c9b      	lsrs	r3, r3, #18
 80015c4:	3301      	adds	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015c8:	e002      	b.n	80015d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015dc:	d102      	bne.n	80015e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f2      	bne.n	80015ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f0:	d110      	bne.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e00f      	b.n	8001616 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001602:	d007      	beq.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800160c:	4a05      	ldr	r2, [pc, #20]	; (8001624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001612:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40007000 	.word	0x40007000
 8001628:	20000000 	.word	0x20000000
 800162c:	431bde83 	.word	0x431bde83

08001630 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_PWREx_EnableVddUSB+0x1c>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_PWREx_EnableVddUSB+0x1c>)
 800163a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163e:	6053      	str	r3, [r2, #4]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40007000 	.word	0x40007000

08001650 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_PWREx_EnableVddIO2+0x1c>)
 800165a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165e:	6053      	str	r3, [r2, #4]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40007000 	.word	0x40007000

08001670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	f000 bc08 	b.w	8001e94 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001684:	4b96      	ldr	r3, [pc, #600]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800168e:	4b94      	ldr	r3, [pc, #592]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80e4 	beq.w	800186e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <HAL_RCC_OscConfig+0x4c>
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	f040 808b 	bne.w	80017ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	f040 8087 	bne.w	80017ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016bc:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_OscConfig+0x64>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e3df      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1a      	ldr	r2, [r3, #32]
 80016d8:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d004      	beq.n	80016ee <HAL_RCC_OscConfig+0x7e>
 80016e4:	4b7e      	ldr	r3, [pc, #504]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ec:	e005      	b.n	80016fa <HAL_RCC_OscConfig+0x8a>
 80016ee:	4b7c      	ldr	r3, [pc, #496]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80016f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d223      	bcs.n	8001746 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fd92 	bl	800222c <RCC_SetFlashLatencyFromMSIRange>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e3c0      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001712:	4b73      	ldr	r3, [pc, #460]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a72      	ldr	r2, [pc, #456]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b70      	ldr	r3, [pc, #448]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	496d      	ldr	r1, [pc, #436]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800172c:	4313      	orrs	r3, r2
 800172e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001730:	4b6b      	ldr	r3, [pc, #428]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	4968      	ldr	r1, [pc, #416]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
 8001744:	e025      	b.n	8001792 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001746:	4b66      	ldr	r3, [pc, #408]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a65      	ldr	r2, [pc, #404]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4960      	ldr	r1, [pc, #384]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001764:	4b5e      	ldr	r3, [pc, #376]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	495b      	ldr	r1, [pc, #364]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fd52 	bl	800222c <RCC_SetFlashLatencyFromMSIRange>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e380      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001792:	f000 fc87 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8001796:	4602      	mov	r2, r0
 8001798:	4b51      	ldr	r3, [pc, #324]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	4950      	ldr	r1, [pc, #320]	; (80018e4 <HAL_RCC_OscConfig+0x274>)
 80017a4:	5ccb      	ldrb	r3, [r1, r3]
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	4a4e      	ldr	r2, [pc, #312]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 80017b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017b2:	4b4e      	ldr	r3, [pc, #312]	; (80018ec <HAL_RCC_OscConfig+0x27c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fa6e 	bl	8000c98 <HAL_InitTick>
 80017bc:	4603      	mov	r3, r0
 80017be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d052      	beq.n	800186c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	e364      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d032      	beq.n	8001838 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017d2:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a42      	ldr	r2, [pc, #264]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017de:	f7ff faab 	bl	8000d38 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e6:	f7ff faa7 	bl	8000d38 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e34d      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f8:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a35      	ldr	r2, [pc, #212]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4930      	ldr	r1, [pc, #192]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001822:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	492b      	ldr	r1, [pc, #172]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
 8001836:	e01a      	b.n	800186e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a28      	ldr	r2, [pc, #160]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001844:	f7ff fa78 	bl	8000d38 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800184c:	f7ff fa74 	bl	8000d38 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e31a      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x1dc>
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800186c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d073      	beq.n	8001962 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d005      	beq.n	800188c <HAL_RCC_OscConfig+0x21c>
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d10e      	bne.n	80018a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d10b      	bne.n	80018a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d063      	beq.n	8001960 <HAL_RCC_OscConfig+0x2f0>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d15f      	bne.n	8001960 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e2f7      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d106      	bne.n	80018bc <HAL_RCC_OscConfig+0x24c>
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e025      	b.n	8001908 <HAL_RCC_OscConfig+0x298>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c4:	d114      	bne.n	80018f0 <HAL_RCC_OscConfig+0x280>
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a02      	ldr	r2, [pc, #8]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e013      	b.n	8001908 <HAL_RCC_OscConfig+0x298>
 80018e0:	40021000 	.word	0x40021000
 80018e4:	0800461c 	.word	0x0800461c
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004
 80018f0:	4ba0      	ldr	r3, [pc, #640]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a9f      	ldr	r2, [pc, #636]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b9d      	ldr	r3, [pc, #628]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a9c      	ldr	r2, [pc, #624]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d013      	beq.n	8001938 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fa12 	bl	8000d38 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fa0e 	bl	8000d38 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e2b4      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192a:	4b92      	ldr	r3, [pc, #584]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x2a8>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff f9fe 	bl	8000d38 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff f9fa 	bl	8000d38 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e2a0      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001952:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x2d0>
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d060      	beq.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2b04      	cmp	r3, #4
 8001972:	d005      	beq.n	8001980 <HAL_RCC_OscConfig+0x310>
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2b0c      	cmp	r3, #12
 8001978:	d119      	bne.n	80019ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d116      	bne.n	80019ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001980:	4b7c      	ldr	r3, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_OscConfig+0x328>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e27d      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001998:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	4973      	ldr	r1, [pc, #460]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ac:	e040      	b.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d023      	beq.n	80019fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b6:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a6e      	ldr	r2, [pc, #440]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff f9b9 	bl	8000d38 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff f9b5 	bl	8000d38 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e25b      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019dc:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b62      	ldr	r3, [pc, #392]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	495f      	ldr	r1, [pc, #380]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
 80019fc:	e018      	b.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a5c      	ldr	r2, [pc, #368]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f995 	bl	8000d38 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a12:	f7ff f991 	bl	8000d38 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e237      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d03c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a44:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4a:	4a4a      	ldr	r2, [pc, #296]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7ff f970 	bl	8000d38 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7ff f96c 	bl	8000d38 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e212      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0ef      	beq.n	8001a5c <HAL_RCC_OscConfig+0x3ec>
 8001a7c:	e01b      	b.n	8001ab6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a84:	4a3b      	ldr	r2, [pc, #236]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a86:	f023 0301 	bic.w	r3, r3, #1
 8001a8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8e:	f7ff f953 	bl	8000d38 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a96:	f7ff f94f 	bl	8000d38 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e1f5      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa8:	4b32      	ldr	r3, [pc, #200]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ef      	bne.n	8001a96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80a6 	beq.w	8001c10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10d      	bne.n	8001af0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aec:	2301      	movs	r3, #1
 8001aee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_RCC_OscConfig+0x508>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d118      	bne.n	8001b2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_RCC_OscConfig+0x508>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_RCC_OscConfig+0x508>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b08:	f7ff f916 	bl	8000d38 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b10:	f7ff f912 	bl	8000d38 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e1b8      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_RCC_OscConfig+0x508>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d108      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4d8>
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b46:	e029      	b.n	8001b9c <HAL_RCC_OscConfig+0x52c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d115      	bne.n	8001b7c <HAL_RCC_OscConfig+0x50c>
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b70:	e014      	b.n	8001b9c <HAL_RCC_OscConfig+0x52c>
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	4b9d      	ldr	r3, [pc, #628]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b82:	4a9c      	ldr	r2, [pc, #624]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b8c:	4b99      	ldr	r3, [pc, #612]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	4a98      	ldr	r2, [pc, #608]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d016      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f8c8 	bl	8000d38 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7ff f8c4 	bl	8000d38 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e168      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc2:	4b8c      	ldr	r3, [pc, #560]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0ed      	beq.n	8001bac <HAL_RCC_OscConfig+0x53c>
 8001bd0:	e015      	b.n	8001bfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7ff f8b1 	bl	8000d38 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7ff f8ad 	bl	8000d38 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e151      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf0:	4b80      	ldr	r3, [pc, #512]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ed      	bne.n	8001bda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c04:	4b7b      	ldr	r3, [pc, #492]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	4a7a      	ldr	r2, [pc, #488]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d03c      	beq.n	8001c96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01c      	beq.n	8001c5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c24:	4b73      	ldr	r3, [pc, #460]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c2a:	4a72      	ldr	r2, [pc, #456]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff f880 	bl	8000d38 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c3c:	f7ff f87c 	bl	8000d38 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e122      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c4e:	4b69      	ldr	r3, [pc, #420]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001c50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0ef      	beq.n	8001c3c <HAL_RCC_OscConfig+0x5cc>
 8001c5c:	e01b      	b.n	8001c96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c5e:	4b65      	ldr	r3, [pc, #404]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c64:	4a63      	ldr	r2, [pc, #396]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001c66:	f023 0301 	bic.w	r3, r3, #1
 8001c6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6e:	f7ff f863 	bl	8000d38 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c76:	f7ff f85f 	bl	8000d38 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e105      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c88:	4b5a      	ldr	r3, [pc, #360]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1ef      	bne.n	8001c76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80f9 	beq.w	8001e92 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	f040 80cf 	bne.w	8001e48 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001caa:	4b52      	ldr	r3, [pc, #328]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0203 	and.w	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d12c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d123      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d11b      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d113      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d109      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	085b      	lsrs	r3, r3, #1
 8001d10:	3b01      	subs	r3, #1
 8001d12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d071      	beq.n	8001dfc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d068      	beq.n	8001df0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d1e:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d105      	bne.n	8001d36 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d2a:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e0ac      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2d      	ldr	r2, [pc, #180]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d46:	f7fe fff7 	bl	8000d38 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7fe fff3 	bl	8000d38 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e099      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d60:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <HAL_RCC_OscConfig+0x788>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d7c:	3a01      	subs	r2, #1
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	4311      	orrs	r1, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d86:	0212      	lsls	r2, r2, #8
 8001d88:	4311      	orrs	r1, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d8e:	0852      	lsrs	r2, r2, #1
 8001d90:	3a01      	subs	r2, #1
 8001d92:	0552      	lsls	r2, r2, #21
 8001d94:	4311      	orrs	r1, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d9a:	0852      	lsrs	r2, r2, #1
 8001d9c:	3a01      	subs	r2, #1
 8001d9e:	0652      	lsls	r2, r2, #25
 8001da0:	4311      	orrs	r1, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001da6:	06d2      	lsls	r2, r2, #27
 8001da8:	430a      	orrs	r2, r1
 8001daa:	4912      	ldr	r1, [pc, #72]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001db0:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4a0c      	ldr	r2, [pc, #48]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dc8:	f7fe ffb6 	bl	8000d38 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7fe ffb2 	bl	8000d38 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e058      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <HAL_RCC_OscConfig+0x784>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dee:	e050      	b.n	8001e92 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e04f      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
 8001df4:	40021000 	.word	0x40021000
 8001df8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d144      	bne.n	8001e92 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e08:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a23      	ldr	r2, [pc, #140]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e14:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4a20      	ldr	r2, [pc, #128]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e20:	f7fe ff8a 	bl	8000d38 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7fe ff86 	bl	8000d38 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e02c      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x7b8>
 8001e46:	e024      	b.n	8001e92 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d01f      	beq.n	8001e8e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7fe ff6d 	bl	8000d38 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e62:	f7fe ff69 	bl	8000d38 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e00f      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	4905      	ldr	r1, [pc, #20]	; (8001e9c <HAL_RCC_OscConfig+0x82c>)
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCC_OscConfig+0x830>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60cb      	str	r3, [r1, #12]
 8001e8c:	e001      	b.n	8001e92 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	feeefffc 	.word	0xfeeefffc

08001ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0e7      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b75      	ldr	r3, [pc, #468]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b72      	ldr	r3, [pc, #456]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4970      	ldr	r1, [pc, #448]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b6e      	ldr	r3, [pc, #440]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0cf      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d010      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	4b66      	ldr	r3, [pc, #408]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d908      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4960      	ldr	r1, [pc, #384]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d04c      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2a:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d121      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0a6      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f42:	4b54      	ldr	r3, [pc, #336]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d115      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e09a      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f5a:	4b4e      	ldr	r3, [pc, #312]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e08e      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6a:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e086      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f7a:	4b46      	ldr	r3, [pc, #280]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4943      	ldr	r1, [pc, #268]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8c:	f7fe fed4 	bl	8000d38 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7fe fed0 	bl	8000d38 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e06e      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 020c 	and.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1eb      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d010      	beq.n	8001fea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d208      	bcs.n	8001fea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	492b      	ldr	r1, [pc, #172]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fea:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d210      	bcs.n	800201a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff8:	4b25      	ldr	r3, [pc, #148]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 0207 	bic.w	r2, r3, #7
 8002000:	4923      	ldr	r1, [pc, #140]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e036      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	4918      	ldr	r1, [pc, #96]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4910      	ldr	r1, [pc, #64]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002058:	f000 f824 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	490b      	ldr	r1, [pc, #44]	; (8002098 <HAL_RCC_ClockConfig+0x1f4>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1f8>)
 8002076:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1fc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fe0b 	bl	8000c98 <HAL_InitTick>
 8002082:	4603      	mov	r3, r0
 8002084:	72fb      	strb	r3, [r7, #11]

  return status;
 8002086:	7afb      	ldrb	r3, [r7, #11]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40022000 	.word	0x40022000
 8002094:	40021000 	.word	0x40021000
 8002098:	0800461c 	.word	0x0800461c
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000004 	.word	0x20000004

080020a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	; 0x24
 80020a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b2:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020bc:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x34>
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d121      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d11e      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020d8:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	e005      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002100:	4a2b      	ldr	r2, [pc, #172]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10d      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002114:	e00a      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d102      	bne.n	8002122 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800211e:	61bb      	str	r3, [r7, #24]
 8002120:	e004      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d101      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800212a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	2b0c      	cmp	r3, #12
 8002130:	d134      	bne.n	800219c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d003      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0xa6>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d003      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0xac>
 8002148:	e005      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800214c:	617b      	str	r3, [r7, #20]
      break;
 800214e:	e005      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002152:	617b      	str	r3, [r7, #20]
      break;
 8002154:	e002      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	617b      	str	r3, [r7, #20]
      break;
 800215a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	3301      	adds	r3, #1
 8002168:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	fb03 f202 	mul.w	r2, r3, r2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	0e5b      	lsrs	r3, r3, #25
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	3301      	adds	r3, #1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800219c:	69bb      	ldr	r3, [r7, #24]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08004634 	.word	0x08004634
 80021b4:	00f42400 	.word	0x00f42400
 80021b8:	007a1200 	.word	0x007a1200

080021bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000000 	.word	0x20000000

080021d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021d8:	f7ff fff0 	bl	80021bc <HAL_RCC_GetHCLKFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	4904      	ldr	r1, [pc, #16]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	0800462c 	.word	0x0800462c

08002200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002204:	f7ff ffda 	bl	80021bc <HAL_RCC_GetHCLKFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x24>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	0adb      	lsrs	r3, r3, #11
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4904      	ldr	r1, [pc, #16]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	0800462c 	.word	0x0800462c

0800222c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002238:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002244:	f7ff f990 	bl	8001568 <HAL_PWREx_GetVoltageRange>
 8002248:	6178      	str	r0, [r7, #20]
 800224a:	e014      	b.n	8002276 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	4a24      	ldr	r2, [pc, #144]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	6593      	str	r3, [r2, #88]	; 0x58
 8002258:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002264:	f7ff f980 	bl	8001568 <HAL_PWREx_GetVoltageRange>
 8002268:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002274:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800227c:	d10b      	bne.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b80      	cmp	r3, #128	; 0x80
 8002282:	d919      	bls.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2ba0      	cmp	r3, #160	; 0xa0
 8002288:	d902      	bls.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800228a:	2302      	movs	r3, #2
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	e013      	b.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002290:	2301      	movs	r3, #1
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	e010      	b.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d902      	bls.n	80022a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800229c:	2303      	movs	r3, #3
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	e00a      	b.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b80      	cmp	r3, #128	; 0x80
 80022a6:	d102      	bne.n	80022ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022a8:	2302      	movs	r3, #2
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	e004      	b.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b70      	cmp	r3, #112	; 0x70
 80022b2:	d101      	bne.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022b4:	2301      	movs	r3, #1
 80022b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 0207 	bic.w	r2, r3, #7
 80022c0:	4909      	ldr	r1, [pc, #36]	; (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40022000 	.word	0x40022000

080022ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022f4:	2300      	movs	r3, #0
 80022f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022f8:	2300      	movs	r3, #0
 80022fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002304:	2b00      	cmp	r3, #0
 8002306:	d041      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800230c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002310:	d02a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002312:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002316:	d824      	bhi.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002318:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800231c:	d008      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800231e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002322:	d81e      	bhi.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232c:	d010      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800232e:	e018      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002330:	4b86      	ldr	r3, [pc, #536]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a85      	ldr	r2, [pc, #532]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800233c:	e015      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fadd 	bl	8002904 <RCCEx_PLLSAI1_Config>
 800234a:	4603      	mov	r3, r0
 800234c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800234e:	e00c      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3320      	adds	r3, #32
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fbc6 	bl	8002ae8 <RCCEx_PLLSAI2_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002360:	e003      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	74fb      	strb	r3, [r7, #19]
      break;
 8002366:	e000      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10b      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002370:	4b76      	ldr	r3, [pc, #472]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800237e:	4973      	ldr	r1, [pc, #460]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002386:	e001      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d041      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800239c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023a0:	d02a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023a6:	d824      	bhi.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023ac:	d008      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023b2:	d81e      	bhi.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023bc:	d010      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023be:	e018      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023c0:	4b62      	ldr	r3, [pc, #392]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a61      	ldr	r2, [pc, #388]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023cc:	e015      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fa95 	bl	8002904 <RCCEx_PLLSAI1_Config>
 80023da:	4603      	mov	r3, r0
 80023dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023de:	e00c      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3320      	adds	r3, #32
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fb7e 	bl	8002ae8 <RCCEx_PLLSAI2_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023f0:	e003      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	74fb      	strb	r3, [r7, #19]
      break;
 80023f6:	e000      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002400:	4b52      	ldr	r3, [pc, #328]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800240e:	494f      	ldr	r1, [pc, #316]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002416:	e001      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80a0 	beq.w	800256a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800243e:	2300      	movs	r3, #0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00d      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4b41      	ldr	r3, [pc, #260]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	4a40      	ldr	r2, [pc, #256]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244e:	6593      	str	r3, [r2, #88]	; 0x58
 8002450:	4b3e      	ldr	r3, [pc, #248]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245c:	2301      	movs	r3, #1
 800245e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002460:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a3a      	ldr	r2, [pc, #232]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800246c:	f7fe fc64 	bl	8000d38 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002472:	e009      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002474:	f7fe fc60 	bl	8000d38 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d902      	bls.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	74fb      	strb	r3, [r7, #19]
        break;
 8002486:	e005      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ef      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d15c      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01f      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d019      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ca:	4a20      	ldr	r2, [pc, #128]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	4a1c      	ldr	r2, [pc, #112]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d016      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe fc1f 	bl	8000d38 <HAL_GetTick>
 80024fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024fc:	e00b      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fc1b 	bl	8000d38 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d902      	bls.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	74fb      	strb	r3, [r7, #19]
            break;
 8002514:	e006      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002516:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ec      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	4904      	ldr	r1, [pc, #16]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002542:	e009      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	74bb      	strb	r3, [r7, #18]
 8002548:	e006      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002558:	7c7b      	ldrb	r3, [r7, #17]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d105      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255e:	4ba6      	ldr	r3, [pc, #664]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	4aa5      	ldr	r2, [pc, #660]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002568:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002576:	4ba0      	ldr	r3, [pc, #640]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f023 0203 	bic.w	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	499c      	ldr	r1, [pc, #624]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002598:	4b97      	ldr	r3, [pc, #604]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 020c 	bic.w	r2, r3, #12
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	4994      	ldr	r1, [pc, #592]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ba:	4b8f      	ldr	r3, [pc, #572]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	498b      	ldr	r1, [pc, #556]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025dc:	4b86      	ldr	r3, [pc, #536]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4983      	ldr	r1, [pc, #524]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025fe:	4b7e      	ldr	r3, [pc, #504]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260c:	497a      	ldr	r1, [pc, #488]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002620:	4b75      	ldr	r3, [pc, #468]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	4972      	ldr	r1, [pc, #456]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002642:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002648:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002650:	4969      	ldr	r1, [pc, #420]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002664:	4b64      	ldr	r3, [pc, #400]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002672:	4961      	ldr	r1, [pc, #388]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002686:	4b5c      	ldr	r3, [pc, #368]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002694:	4958      	ldr	r1, [pc, #352]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026a8:	4b53      	ldr	r3, [pc, #332]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	4950      	ldr	r1, [pc, #320]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026ca:	4b4b      	ldr	r3, [pc, #300]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	4947      	ldr	r1, [pc, #284]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026ec:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026f2:	f023 0203 	bic.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	493f      	ldr	r1, [pc, #252]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d028      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800270e:	4b3a      	ldr	r3, [pc, #232]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002714:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4936      	ldr	r1, [pc, #216]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800272c:	d106      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272e:	4b32      	ldr	r3, [pc, #200]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4a31      	ldr	r2, [pc, #196]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002738:	60d3      	str	r3, [r2, #12]
 800273a:	e011      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002744:	d10c      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f8d9 	bl	8002904 <RCCEx_PLLSAI1_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d028      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277a:	491f      	ldr	r1, [pc, #124]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800278a:	d106      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800278c:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a19      	ldr	r2, [pc, #100]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002796:	60d3      	str	r3, [r2, #12]
 8002798:	e011      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027a2:	d10c      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3304      	adds	r3, #4
 80027a8:	2101      	movs	r1, #1
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f8aa 	bl	8002904 <RCCEx_PLLSAI1_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d02a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d8:	4907      	ldr	r1, [pc, #28]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027e8:	d108      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ea:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	4a02      	ldr	r2, [pc, #8]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027f4:	60d3      	str	r3, [r2, #12]
 80027f6:	e013      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80027f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002804:	d10c      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3304      	adds	r3, #4
 800280a:	2101      	movs	r1, #1
 800280c:	4618      	mov	r0, r3
 800280e:	f000 f879 	bl	8002904 <RCCEx_PLLSAI1_Config>
 8002812:	4603      	mov	r3, r0
 8002814:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002816:	7cfb      	ldrb	r3, [r7, #19]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800281c:	7cfb      	ldrb	r3, [r7, #19]
 800281e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d02f      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800282c:	4b2c      	ldr	r3, [pc, #176]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800283a:	4929      	ldr	r1, [pc, #164]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800284a:	d10d      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3304      	adds	r3, #4
 8002850:	2102      	movs	r1, #2
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f856 	bl	8002904 <RCCEx_PLLSAI1_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d014      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	74bb      	strb	r3, [r7, #18]
 8002866:	e011      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800286c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002870:	d10c      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3320      	adds	r3, #32
 8002876:	2102      	movs	r1, #2
 8002878:	4618      	mov	r0, r3
 800287a:	f000 f935 	bl	8002ae8 <RCCEx_PLLSAI2_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002882:	7cfb      	ldrb	r3, [r7, #19]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028a8:	490d      	ldr	r1, [pc, #52]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00b      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028cc:	4904      	ldr	r1, [pc, #16]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000

080028e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a04      	ldr	r2, [pc, #16]	; (8002900 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	6013      	str	r3, [r2, #0]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000

08002904 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002912:	4b74      	ldr	r3, [pc, #464]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d018      	beq.n	8002950 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800291e:	4b71      	ldr	r3, [pc, #452]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0203 	and.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d10d      	bne.n	800294a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
       ||
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002936:	4b6b      	ldr	r3, [pc, #428]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
       ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d047      	beq.n	80029da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	e044      	b.n	80029da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d018      	beq.n	800298a <RCCEx_PLLSAI1_Config+0x86>
 8002958:	2b03      	cmp	r3, #3
 800295a:	d825      	bhi.n	80029a8 <RCCEx_PLLSAI1_Config+0xa4>
 800295c:	2b01      	cmp	r3, #1
 800295e:	d002      	beq.n	8002966 <RCCEx_PLLSAI1_Config+0x62>
 8002960:	2b02      	cmp	r3, #2
 8002962:	d009      	beq.n	8002978 <RCCEx_PLLSAI1_Config+0x74>
 8002964:	e020      	b.n	80029a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002966:	4b5f      	ldr	r3, [pc, #380]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d11d      	bne.n	80029ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002976:	e01a      	b.n	80029ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002978:	4b5a      	ldr	r3, [pc, #360]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d116      	bne.n	80029b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002988:	e013      	b.n	80029b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800298a:	4b56      	ldr	r3, [pc, #344]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10f      	bne.n	80029b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002996:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029a6:	e006      	b.n	80029b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      break;
 80029ac:	e004      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ae:	bf00      	nop
 80029b0:	e002      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029b2:	bf00      	nop
 80029b4:	e000      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10d      	bne.n	80029da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029be:	4b49      	ldr	r3, [pc, #292]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	430b      	orrs	r3, r1
 80029d4:	4943      	ldr	r1, [pc, #268]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d17c      	bne.n	8002ada <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029e0:	4b40      	ldr	r3, [pc, #256]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a3f      	ldr	r2, [pc, #252]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ec:	f7fe f9a4 	bl	8000d38 <HAL_GetTick>
 80029f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029f2:	e009      	b.n	8002a08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029f4:	f7fe f9a0 	bl	8000d38 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d902      	bls.n	8002a08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	73fb      	strb	r3, [r7, #15]
        break;
 8002a06:	e005      	b.n	8002a14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a08:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ef      	bne.n	80029f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d15f      	bne.n	8002ada <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d110      	bne.n	8002a42 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a20:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002a28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6892      	ldr	r2, [r2, #8]
 8002a30:	0211      	lsls	r1, r2, #8
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68d2      	ldr	r2, [r2, #12]
 8002a36:	06d2      	lsls	r2, r2, #27
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	492a      	ldr	r1, [pc, #168]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	610b      	str	r3, [r1, #16]
 8002a40:	e027      	b.n	8002a92 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d112      	bne.n	8002a6e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a48:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6892      	ldr	r2, [r2, #8]
 8002a58:	0211      	lsls	r1, r2, #8
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6912      	ldr	r2, [r2, #16]
 8002a5e:	0852      	lsrs	r2, r2, #1
 8002a60:	3a01      	subs	r2, #1
 8002a62:	0552      	lsls	r2, r2, #21
 8002a64:	430a      	orrs	r2, r1
 8002a66:	491f      	ldr	r1, [pc, #124]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	610b      	str	r3, [r1, #16]
 8002a6c:	e011      	b.n	8002a92 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6892      	ldr	r2, [r2, #8]
 8002a7e:	0211      	lsls	r1, r2, #8
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6952      	ldr	r2, [r2, #20]
 8002a84:	0852      	lsrs	r2, r2, #1
 8002a86:	3a01      	subs	r2, #1
 8002a88:	0652      	lsls	r2, r2, #25
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	4915      	ldr	r1, [pc, #84]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a92:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a13      	ldr	r2, [pc, #76]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7fe f94b 	bl	8000d38 <HAL_GetTick>
 8002aa2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aa4:	e009      	b.n	8002aba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aa6:	f7fe f947 	bl	8000d38 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d902      	bls.n	8002aba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	73fb      	strb	r3, [r7, #15]
          break;
 8002ab8:	e005      	b.n	8002ac6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0ef      	beq.n	8002aa6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d106      	bne.n	8002ada <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	4903      	ldr	r1, [pc, #12]	; (8002ae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002af6:	4b69      	ldr	r3, [pc, #420]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d018      	beq.n	8002b34 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b02:	4b66      	ldr	r3, [pc, #408]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0203 	and.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d10d      	bne.n	8002b2e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
       ||
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b1a:	4b60      	ldr	r3, [pc, #384]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
       ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d047      	beq.n	8002bbe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
 8002b32:	e044      	b.n	8002bbe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d018      	beq.n	8002b6e <RCCEx_PLLSAI2_Config+0x86>
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d825      	bhi.n	8002b8c <RCCEx_PLLSAI2_Config+0xa4>
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d002      	beq.n	8002b4a <RCCEx_PLLSAI2_Config+0x62>
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d009      	beq.n	8002b5c <RCCEx_PLLSAI2_Config+0x74>
 8002b48:	e020      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b4a:	4b54      	ldr	r3, [pc, #336]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d11d      	bne.n	8002b92 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5a:	e01a      	b.n	8002b92 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b5c:	4b4f      	ldr	r3, [pc, #316]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d116      	bne.n	8002b96 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6c:	e013      	b.n	8002b96 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b6e:	4b4b      	ldr	r3, [pc, #300]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10f      	bne.n	8002b9a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b7a:	4b48      	ldr	r3, [pc, #288]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b8a:	e006      	b.n	8002b9a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b90:	e004      	b.n	8002b9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b92:	bf00      	nop
 8002b94:	e002      	b.n	8002b9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b96:	bf00      	nop
 8002b98:	e000      	b.n	8002b9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10d      	bne.n	8002bbe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ba2:	4b3e      	ldr	r3, [pc, #248]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	4938      	ldr	r1, [pc, #224]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d166      	bne.n	8002c92 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bc4:	4b35      	ldr	r3, [pc, #212]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a34      	ldr	r2, [pc, #208]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd0:	f7fe f8b2 	bl	8000d38 <HAL_GetTick>
 8002bd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bd6:	e009      	b.n	8002bec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bd8:	f7fe f8ae 	bl	8000d38 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d902      	bls.n	8002bec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bea:	e005      	b.n	8002bf8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bec:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ef      	bne.n	8002bd8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d149      	bne.n	8002c92 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d110      	bne.n	8002c26 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6892      	ldr	r2, [r2, #8]
 8002c14:	0211      	lsls	r1, r2, #8
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68d2      	ldr	r2, [r2, #12]
 8002c1a:	06d2      	lsls	r2, r2, #27
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	491f      	ldr	r1, [pc, #124]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	614b      	str	r3, [r1, #20]
 8002c24:	e011      	b.n	8002c4a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6892      	ldr	r2, [r2, #8]
 8002c36:	0211      	lsls	r1, r2, #8
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6912      	ldr	r2, [r2, #16]
 8002c3c:	0852      	lsrs	r2, r2, #1
 8002c3e:	3a01      	subs	r2, #1
 8002c40:	0652      	lsls	r2, r2, #25
 8002c42:	430a      	orrs	r2, r1
 8002c44:	4915      	ldr	r1, [pc, #84]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c4a:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7fe f86f 	bl	8000d38 <HAL_GetTick>
 8002c5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c5c:	e009      	b.n	8002c72 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c5e:	f7fe f86b 	bl	8000d38 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d902      	bls.n	8002c72 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	73fb      	strb	r3, [r7, #15]
          break;
 8002c70:	e005      	b.n	8002c7e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0ef      	beq.n	8002c5e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d106      	bne.n	8002c92 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	4903      	ldr	r1, [pc, #12]	; (8002c9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e040      	b.n	8002d34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fd fe0e 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2224      	movs	r2, #36	; 0x24
 8002ccc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8c0 	bl	8002e64 <UART_SetConfig>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e022      	b.n	8002d34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fb6c 	bl	80033d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fbf3 	bl	8003518 <UART_CheckIdleState>
 8002d32:	4603      	mov	r3, r0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	; 0x28
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	f040 8082 	bne.w	8002e5a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <HAL_UART_Transmit+0x26>
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e07a      	b.n	8002e5c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_UART_Transmit+0x38>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e073      	b.n	8002e5c <HAL_UART_Transmit+0x120>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2221      	movs	r2, #33	; 0x21
 8002d88:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d8a:	f7fd ffd5 	bl	8000d38 <HAL_GetTick>
 8002d8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	88fa      	ldrh	r2, [r7, #6]
 8002d94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	88fa      	ldrh	r2, [r7, #6]
 8002d9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da8:	d108      	bne.n	8002dbc <HAL_UART_Transmit+0x80>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d104      	bne.n	8002dbc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	61bb      	str	r3, [r7, #24]
 8002dba:	e003      	b.n	8002dc4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002dcc:	e02d      	b.n	8002e2a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fbe6 	bl	80035aa <UART_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e039      	b.n	8002e5c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10b      	bne.n	8002e06 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	881a      	ldrh	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	3302      	adds	r3, #2
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	e008      	b.n	8002e18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	b292      	uxth	r2, r2
 8002e10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3301      	adds	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1cb      	bne.n	8002dce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2140      	movs	r1, #64	; 0x40
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 fbb2 	bl	80035aa <UART_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e005      	b.n	8002e5c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3720      	adds	r7, #32
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e68:	b08a      	sub	sp, #40	; 0x28
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4ba4      	ldr	r3, [pc, #656]	; (8003124 <UART_SetConfig+0x2c0>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a99      	ldr	r2, [pc, #612]	; (8003128 <UART_SetConfig+0x2c4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a90      	ldr	r2, [pc, #576]	; (800312c <UART_SetConfig+0x2c8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d126      	bne.n	8002f3c <UART_SetConfig+0xd8>
 8002eee:	4b90      	ldr	r3, [pc, #576]	; (8003130 <UART_SetConfig+0x2cc>)
 8002ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d81b      	bhi.n	8002f34 <UART_SetConfig+0xd0>
 8002efc:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <UART_SetConfig+0xa0>)
 8002efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f02:	bf00      	nop
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08002f25 	.word	0x08002f25
 8002f0c:	08002f1d 	.word	0x08002f1d
 8002f10:	08002f2d 	.word	0x08002f2d
 8002f14:	2301      	movs	r3, #1
 8002f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f1a:	e116      	b.n	800314a <UART_SetConfig+0x2e6>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f22:	e112      	b.n	800314a <UART_SetConfig+0x2e6>
 8002f24:	2304      	movs	r3, #4
 8002f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f2a:	e10e      	b.n	800314a <UART_SetConfig+0x2e6>
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f32:	e10a      	b.n	800314a <UART_SetConfig+0x2e6>
 8002f34:	2310      	movs	r3, #16
 8002f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f3a:	e106      	b.n	800314a <UART_SetConfig+0x2e6>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a7c      	ldr	r2, [pc, #496]	; (8003134 <UART_SetConfig+0x2d0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d138      	bne.n	8002fb8 <UART_SetConfig+0x154>
 8002f46:	4b7a      	ldr	r3, [pc, #488]	; (8003130 <UART_SetConfig+0x2cc>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b0c      	cmp	r3, #12
 8002f52:	d82d      	bhi.n	8002fb0 <UART_SetConfig+0x14c>
 8002f54:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <UART_SetConfig+0xf8>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002f91 	.word	0x08002f91
 8002f60:	08002fb1 	.word	0x08002fb1
 8002f64:	08002fb1 	.word	0x08002fb1
 8002f68:	08002fb1 	.word	0x08002fb1
 8002f6c:	08002fa1 	.word	0x08002fa1
 8002f70:	08002fb1 	.word	0x08002fb1
 8002f74:	08002fb1 	.word	0x08002fb1
 8002f78:	08002fb1 	.word	0x08002fb1
 8002f7c:	08002f99 	.word	0x08002f99
 8002f80:	08002fb1 	.word	0x08002fb1
 8002f84:	08002fb1 	.word	0x08002fb1
 8002f88:	08002fb1 	.word	0x08002fb1
 8002f8c:	08002fa9 	.word	0x08002fa9
 8002f90:	2300      	movs	r3, #0
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f96:	e0d8      	b.n	800314a <UART_SetConfig+0x2e6>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9e:	e0d4      	b.n	800314a <UART_SetConfig+0x2e6>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa6:	e0d0      	b.n	800314a <UART_SetConfig+0x2e6>
 8002fa8:	2308      	movs	r3, #8
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fae:	e0cc      	b.n	800314a <UART_SetConfig+0x2e6>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb6:	e0c8      	b.n	800314a <UART_SetConfig+0x2e6>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a5e      	ldr	r2, [pc, #376]	; (8003138 <UART_SetConfig+0x2d4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d125      	bne.n	800300e <UART_SetConfig+0x1aa>
 8002fc2:	4b5b      	ldr	r3, [pc, #364]	; (8003130 <UART_SetConfig+0x2cc>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fcc:	2b30      	cmp	r3, #48	; 0x30
 8002fce:	d016      	beq.n	8002ffe <UART_SetConfig+0x19a>
 8002fd0:	2b30      	cmp	r3, #48	; 0x30
 8002fd2:	d818      	bhi.n	8003006 <UART_SetConfig+0x1a2>
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d00a      	beq.n	8002fee <UART_SetConfig+0x18a>
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d814      	bhi.n	8003006 <UART_SetConfig+0x1a2>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <UART_SetConfig+0x182>
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d008      	beq.n	8002ff6 <UART_SetConfig+0x192>
 8002fe4:	e00f      	b.n	8003006 <UART_SetConfig+0x1a2>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fec:	e0ad      	b.n	800314a <UART_SetConfig+0x2e6>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff4:	e0a9      	b.n	800314a <UART_SetConfig+0x2e6>
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ffc:	e0a5      	b.n	800314a <UART_SetConfig+0x2e6>
 8002ffe:	2308      	movs	r3, #8
 8003000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003004:	e0a1      	b.n	800314a <UART_SetConfig+0x2e6>
 8003006:	2310      	movs	r3, #16
 8003008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300c:	e09d      	b.n	800314a <UART_SetConfig+0x2e6>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a4a      	ldr	r2, [pc, #296]	; (800313c <UART_SetConfig+0x2d8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d125      	bne.n	8003064 <UART_SetConfig+0x200>
 8003018:	4b45      	ldr	r3, [pc, #276]	; (8003130 <UART_SetConfig+0x2cc>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003022:	2bc0      	cmp	r3, #192	; 0xc0
 8003024:	d016      	beq.n	8003054 <UART_SetConfig+0x1f0>
 8003026:	2bc0      	cmp	r3, #192	; 0xc0
 8003028:	d818      	bhi.n	800305c <UART_SetConfig+0x1f8>
 800302a:	2b80      	cmp	r3, #128	; 0x80
 800302c:	d00a      	beq.n	8003044 <UART_SetConfig+0x1e0>
 800302e:	2b80      	cmp	r3, #128	; 0x80
 8003030:	d814      	bhi.n	800305c <UART_SetConfig+0x1f8>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <UART_SetConfig+0x1d8>
 8003036:	2b40      	cmp	r3, #64	; 0x40
 8003038:	d008      	beq.n	800304c <UART_SetConfig+0x1e8>
 800303a:	e00f      	b.n	800305c <UART_SetConfig+0x1f8>
 800303c:	2300      	movs	r3, #0
 800303e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003042:	e082      	b.n	800314a <UART_SetConfig+0x2e6>
 8003044:	2302      	movs	r3, #2
 8003046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800304a:	e07e      	b.n	800314a <UART_SetConfig+0x2e6>
 800304c:	2304      	movs	r3, #4
 800304e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003052:	e07a      	b.n	800314a <UART_SetConfig+0x2e6>
 8003054:	2308      	movs	r3, #8
 8003056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305a:	e076      	b.n	800314a <UART_SetConfig+0x2e6>
 800305c:	2310      	movs	r3, #16
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003062:	e072      	b.n	800314a <UART_SetConfig+0x2e6>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a35      	ldr	r2, [pc, #212]	; (8003140 <UART_SetConfig+0x2dc>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d12a      	bne.n	80030c4 <UART_SetConfig+0x260>
 800306e:	4b30      	ldr	r3, [pc, #192]	; (8003130 <UART_SetConfig+0x2cc>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800307c:	d01a      	beq.n	80030b4 <UART_SetConfig+0x250>
 800307e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003082:	d81b      	bhi.n	80030bc <UART_SetConfig+0x258>
 8003084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003088:	d00c      	beq.n	80030a4 <UART_SetConfig+0x240>
 800308a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800308e:	d815      	bhi.n	80030bc <UART_SetConfig+0x258>
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <UART_SetConfig+0x238>
 8003094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003098:	d008      	beq.n	80030ac <UART_SetConfig+0x248>
 800309a:	e00f      	b.n	80030bc <UART_SetConfig+0x258>
 800309c:	2300      	movs	r3, #0
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a2:	e052      	b.n	800314a <UART_SetConfig+0x2e6>
 80030a4:	2302      	movs	r3, #2
 80030a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030aa:	e04e      	b.n	800314a <UART_SetConfig+0x2e6>
 80030ac:	2304      	movs	r3, #4
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b2:	e04a      	b.n	800314a <UART_SetConfig+0x2e6>
 80030b4:	2308      	movs	r3, #8
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ba:	e046      	b.n	800314a <UART_SetConfig+0x2e6>
 80030bc:	2310      	movs	r3, #16
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c2:	e042      	b.n	800314a <UART_SetConfig+0x2e6>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a17      	ldr	r2, [pc, #92]	; (8003128 <UART_SetConfig+0x2c4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d13a      	bne.n	8003144 <UART_SetConfig+0x2e0>
 80030ce:	4b18      	ldr	r3, [pc, #96]	; (8003130 <UART_SetConfig+0x2cc>)
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030dc:	d01a      	beq.n	8003114 <UART_SetConfig+0x2b0>
 80030de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030e2:	d81b      	bhi.n	800311c <UART_SetConfig+0x2b8>
 80030e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e8:	d00c      	beq.n	8003104 <UART_SetConfig+0x2a0>
 80030ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ee:	d815      	bhi.n	800311c <UART_SetConfig+0x2b8>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <UART_SetConfig+0x298>
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f8:	d008      	beq.n	800310c <UART_SetConfig+0x2a8>
 80030fa:	e00f      	b.n	800311c <UART_SetConfig+0x2b8>
 80030fc:	2300      	movs	r3, #0
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003102:	e022      	b.n	800314a <UART_SetConfig+0x2e6>
 8003104:	2302      	movs	r3, #2
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800310a:	e01e      	b.n	800314a <UART_SetConfig+0x2e6>
 800310c:	2304      	movs	r3, #4
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003112:	e01a      	b.n	800314a <UART_SetConfig+0x2e6>
 8003114:	2308      	movs	r3, #8
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311a:	e016      	b.n	800314a <UART_SetConfig+0x2e6>
 800311c:	2310      	movs	r3, #16
 800311e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003122:	e012      	b.n	800314a <UART_SetConfig+0x2e6>
 8003124:	efff69f3 	.word	0xefff69f3
 8003128:	40008000 	.word	0x40008000
 800312c:	40013800 	.word	0x40013800
 8003130:	40021000 	.word	0x40021000
 8003134:	40004400 	.word	0x40004400
 8003138:	40004800 	.word	0x40004800
 800313c:	40004c00 	.word	0x40004c00
 8003140:	40005000 	.word	0x40005000
 8003144:	2310      	movs	r3, #16
 8003146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a9f      	ldr	r2, [pc, #636]	; (80033cc <UART_SetConfig+0x568>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d17a      	bne.n	800324a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003154:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003158:	2b08      	cmp	r3, #8
 800315a:	d824      	bhi.n	80031a6 <UART_SetConfig+0x342>
 800315c:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <UART_SetConfig+0x300>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	08003189 	.word	0x08003189
 8003168:	080031a7 	.word	0x080031a7
 800316c:	08003191 	.word	0x08003191
 8003170:	080031a7 	.word	0x080031a7
 8003174:	08003197 	.word	0x08003197
 8003178:	080031a7 	.word	0x080031a7
 800317c:	080031a7 	.word	0x080031a7
 8003180:	080031a7 	.word	0x080031a7
 8003184:	0800319f 	.word	0x0800319f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003188:	f7ff f824 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 800318c:	61f8      	str	r0, [r7, #28]
        break;
 800318e:	e010      	b.n	80031b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003190:	4b8f      	ldr	r3, [pc, #572]	; (80033d0 <UART_SetConfig+0x56c>)
 8003192:	61fb      	str	r3, [r7, #28]
        break;
 8003194:	e00d      	b.n	80031b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003196:	f7fe ff85 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 800319a:	61f8      	str	r0, [r7, #28]
        break;
 800319c:	e009      	b.n	80031b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800319e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031a2:	61fb      	str	r3, [r7, #28]
        break;
 80031a4:	e005      	b.n	80031b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80fb 	beq.w	80033b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	69fa      	ldr	r2, [r7, #28]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d305      	bcc.n	80031d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d903      	bls.n	80031de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031dc:	e0e8      	b.n	80033b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	2200      	movs	r2, #0
 80031e2:	461c      	mov	r4, r3
 80031e4:	4615      	mov	r5, r2
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	022b      	lsls	r3, r5, #8
 80031f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031f4:	0222      	lsls	r2, r4, #8
 80031f6:	68f9      	ldr	r1, [r7, #12]
 80031f8:	6849      	ldr	r1, [r1, #4]
 80031fa:	0849      	lsrs	r1, r1, #1
 80031fc:	2000      	movs	r0, #0
 80031fe:	4688      	mov	r8, r1
 8003200:	4681      	mov	r9, r0
 8003202:	eb12 0a08 	adds.w	sl, r2, r8
 8003206:	eb43 0b09 	adc.w	fp, r3, r9
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003218:	4650      	mov	r0, sl
 800321a:	4659      	mov	r1, fp
 800321c:	f7fd f840 	bl	80002a0 <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4613      	mov	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800322e:	d308      	bcc.n	8003242 <UART_SetConfig+0x3de>
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003236:	d204      	bcs.n	8003242 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	60da      	str	r2, [r3, #12]
 8003240:	e0b6      	b.n	80033b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003248:	e0b2      	b.n	80033b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003252:	d15e      	bne.n	8003312 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003254:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003258:	2b08      	cmp	r3, #8
 800325a:	d828      	bhi.n	80032ae <UART_SetConfig+0x44a>
 800325c:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <UART_SetConfig+0x400>)
 800325e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003262:	bf00      	nop
 8003264:	08003289 	.word	0x08003289
 8003268:	08003291 	.word	0x08003291
 800326c:	08003299 	.word	0x08003299
 8003270:	080032af 	.word	0x080032af
 8003274:	0800329f 	.word	0x0800329f
 8003278:	080032af 	.word	0x080032af
 800327c:	080032af 	.word	0x080032af
 8003280:	080032af 	.word	0x080032af
 8003284:	080032a7 	.word	0x080032a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003288:	f7fe ffa4 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 800328c:	61f8      	str	r0, [r7, #28]
        break;
 800328e:	e014      	b.n	80032ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003290:	f7fe ffb6 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8003294:	61f8      	str	r0, [r7, #28]
        break;
 8003296:	e010      	b.n	80032ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003298:	4b4d      	ldr	r3, [pc, #308]	; (80033d0 <UART_SetConfig+0x56c>)
 800329a:	61fb      	str	r3, [r7, #28]
        break;
 800329c:	e00d      	b.n	80032ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800329e:	f7fe ff01 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 80032a2:	61f8      	str	r0, [r7, #28]
        break;
 80032a4:	e009      	b.n	80032ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032aa:	61fb      	str	r3, [r7, #28]
        break;
 80032ac:	e005      	b.n	80032ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d077      	beq.n	80033b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005a      	lsls	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	441a      	add	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	2b0f      	cmp	r3, #15
 80032da:	d916      	bls.n	800330a <UART_SetConfig+0x4a6>
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e2:	d212      	bcs.n	800330a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f023 030f 	bic.w	r3, r3, #15
 80032ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	085b      	lsrs	r3, r3, #1
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	8afb      	ldrh	r3, [r7, #22]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	8afa      	ldrh	r2, [r7, #22]
 8003306:	60da      	str	r2, [r3, #12]
 8003308:	e052      	b.n	80033b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003310:	e04e      	b.n	80033b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003312:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003316:	2b08      	cmp	r3, #8
 8003318:	d827      	bhi.n	800336a <UART_SetConfig+0x506>
 800331a:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <UART_SetConfig+0x4bc>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	08003345 	.word	0x08003345
 8003324:	0800334d 	.word	0x0800334d
 8003328:	08003355 	.word	0x08003355
 800332c:	0800336b 	.word	0x0800336b
 8003330:	0800335b 	.word	0x0800335b
 8003334:	0800336b 	.word	0x0800336b
 8003338:	0800336b 	.word	0x0800336b
 800333c:	0800336b 	.word	0x0800336b
 8003340:	08003363 	.word	0x08003363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003344:	f7fe ff46 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 8003348:	61f8      	str	r0, [r7, #28]
        break;
 800334a:	e014      	b.n	8003376 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800334c:	f7fe ff58 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8003350:	61f8      	str	r0, [r7, #28]
        break;
 8003352:	e010      	b.n	8003376 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003354:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <UART_SetConfig+0x56c>)
 8003356:	61fb      	str	r3, [r7, #28]
        break;
 8003358:	e00d      	b.n	8003376 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800335a:	f7fe fea3 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 800335e:	61f8      	str	r0, [r7, #28]
        break;
 8003360:	e009      	b.n	8003376 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003366:	61fb      	str	r3, [r7, #28]
        break;
 8003368:	e005      	b.n	8003376 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003374:	bf00      	nop
    }

    if (pclk != 0U)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d019      	beq.n	80033b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	085a      	lsrs	r2, r3, #1
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	441a      	add	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	fbb2 f3f3 	udiv	r3, r2, r3
 800338e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b0f      	cmp	r3, #15
 8003394:	d909      	bls.n	80033aa <UART_SetConfig+0x546>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339c:	d205      	bcs.n	80033aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60da      	str	r2, [r3, #12]
 80033a8:	e002      	b.n	80033b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3728      	adds	r7, #40	; 0x28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ca:	bf00      	nop
 80033cc:	40008000 	.word	0x40008000
 80033d0:	00f42400 	.word	0x00f42400

080033d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01a      	beq.n	80034ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d10a      	bne.n	80034ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
  }
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af02      	add	r7, sp, #8
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003528:	f7fd fc06 	bl	8000d38 <HAL_GetTick>
 800352c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b08      	cmp	r3, #8
 800353a:	d10e      	bne.n	800355a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800353c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f82d 	bl	80035aa <UART_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e023      	b.n	80035a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b04      	cmp	r3, #4
 8003566:	d10e      	bne.n	8003586 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f817 	bl	80035aa <UART_WaitOnFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e00d      	b.n	80035a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b09c      	sub	sp, #112	; 0x70
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ba:	e0a5      	b.n	8003708 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	f000 80a1 	beq.w	8003708 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7fd fbb7 	bl	8000d38 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <UART_WaitOnFlagUntilTimeout+0x32>
 80035d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d13e      	bne.n	800365a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80035ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035f0:	667b      	str	r3, [r7, #100]	; 0x64
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003600:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e6      	bne.n	80035dc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3308      	adds	r3, #8
 8003614:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	663b      	str	r3, [r7, #96]	; 0x60
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3308      	adds	r3, #8
 800362c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800362e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003630:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003632:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003636:	e841 2300 	strex	r3, r2, [r1]
 800363a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800363c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1e5      	bne.n	800360e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e067      	b.n	800372a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d04f      	beq.n	8003708 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003676:	d147      	bne.n	8003708 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003680:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	e853 3f00 	ldrex	r3, [r3]
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003696:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a0:	637b      	str	r3, [r7, #52]	; 0x34
 80036a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a8:	e841 2300 	strex	r3, r2, [r1]
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e6      	bne.n	8003682 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3308      	adds	r3, #8
 80036ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	613b      	str	r3, [r7, #16]
   return(result);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3308      	adds	r3, #8
 80036d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036d4:	623a      	str	r2, [r7, #32]
 80036d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	69f9      	ldr	r1, [r7, #28]
 80036da:	6a3a      	ldr	r2, [r7, #32]
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e5      	bne.n	80036b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e010      	b.n	800372a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	429a      	cmp	r2, r3
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	429a      	cmp	r2, r3
 8003724:	f43f af4a 	beq.w	80035bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3770      	adds	r7, #112	; 0x70
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003732:	b084      	sub	sp, #16
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	f107 001c 	add.w	r0, r7, #28
 8003740:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fa6f 	bl	8003c34 <USB_CoreReset>
 8003756:	4603      	mov	r3, r0
 8003758:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800375a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d106      	bne.n	800376e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	639a      	str	r2, [r3, #56]	; 0x38
 800376c:	e005      	b.n	800377a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800377a:	7bfb      	ldrb	r3, [r7, #15]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003786:	b004      	add	sp, #16
 8003788:	4770      	bx	lr

0800378a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f023 0201 	bic.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d115      	bne.n	80037fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037da:	2001      	movs	r0, #1
 80037dc:	f7fd fab8 	bl	8000d50 <HAL_Delay>
      ms++;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	3301      	adds	r3, #1
 80037e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fa16 	bl	8003c18 <USB_GetMode>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d01e      	beq.n	8003830 <USB_SetCurrentMode+0x84>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b31      	cmp	r3, #49	; 0x31
 80037f6:	d9f0      	bls.n	80037da <USB_SetCurrentMode+0x2e>
 80037f8:	e01a      	b.n	8003830 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d115      	bne.n	800382c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800380c:	2001      	movs	r0, #1
 800380e:	f7fd fa9f 	bl	8000d50 <HAL_Delay>
      ms++;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3301      	adds	r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f9fd 	bl	8003c18 <USB_GetMode>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <USB_SetCurrentMode+0x84>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b31      	cmp	r3, #49	; 0x31
 8003828:	d9f0      	bls.n	800380c <USB_SetCurrentMode+0x60>
 800382a:	e001      	b.n	8003830 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e005      	b.n	800383c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b32      	cmp	r3, #50	; 0x32
 8003834:	d101      	bne.n	800383a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003844:	b084      	sub	sp, #16
 8003846:	b580      	push	{r7, lr}
 8003848:	b086      	sub	sp, #24
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	e009      	b.n	8003878 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3340      	adds	r3, #64	; 0x40
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	2200      	movs	r2, #0
 8003870:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	3301      	adds	r3, #1
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b0e      	cmp	r3, #14
 800387c:	d9f2      	bls.n	8003864 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800387e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d11c      	bne.n	80038be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003892:	f043 0302 	orr.w	r3, r3, #2
 8003896:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	e005      	b.n	80038ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038d0:	461a      	mov	r2, r3
 80038d2:	2300      	movs	r3, #0
 80038d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038dc:	4619      	mov	r1, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e4:	461a      	mov	r2, r3
 80038e6:	680b      	ldr	r3, [r1, #0]
 80038e8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038ea:	2103      	movs	r1, #3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f959 	bl	8003ba4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038f2:	2110      	movs	r1, #16
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f8f1 	bl	8003adc <USB_FlushTxFifo>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f91d 	bl	8003b44 <USB_FlushRxFifo>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391a:	461a      	mov	r2, r3
 800391c:	2300      	movs	r3, #0
 800391e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003926:	461a      	mov	r2, r3
 8003928:	2300      	movs	r3, #0
 800392a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003932:	461a      	mov	r2, r3
 8003934:	2300      	movs	r3, #0
 8003936:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003938:	2300      	movs	r3, #0
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	e043      	b.n	80039c6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003954:	d118      	bne.n	8003988 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003968:	461a      	mov	r2, r3
 800396a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	e013      	b.n	800399a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397e:	461a      	mov	r2, r3
 8003980:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e008      	b.n	800399a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003994:	461a      	mov	r2, r3
 8003996:	2300      	movs	r3, #0
 8003998:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a6:	461a      	mov	r2, r3
 80039a8:	2300      	movs	r3, #0
 80039aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b8:	461a      	mov	r2, r3
 80039ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	3301      	adds	r3, #1
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d3b7      	bcc.n	800393e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	e043      	b.n	8003a5c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039ea:	d118      	bne.n	8003a1e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fe:	461a      	mov	r2, r3
 8003a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e013      	b.n	8003a30 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a14:	461a      	mov	r2, r3
 8003a16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	e008      	b.n	8003a30 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	2300      	movs	r3, #0
 8003a40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d3b7      	bcc.n	80039d4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f043 0210 	orr.w	r2, r3, #16
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <USB_DevInit+0x294>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f043 0208 	orr.w	r2, r3, #8
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d107      	bne.n	8003ac6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003abe:	f043 0304 	orr.w	r3, r3, #4
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ad2:	b004      	add	sp, #16
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	803c3800 	.word	0x803c3800

08003adc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3301      	adds	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <USB_FlushTxFifo+0x64>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e01b      	b.n	8003b34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	daf2      	bge.n	8003aea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	019b      	lsls	r3, r3, #6
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	3301      	adds	r3, #1
 8003b18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4a08      	ldr	r2, [pc, #32]	; (8003b40 <USB_FlushTxFifo+0x64>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e006      	b.n	8003b34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	d0f0      	beq.n	8003b14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	00030d40 	.word	0x00030d40

08003b44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	3301      	adds	r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a11      	ldr	r2, [pc, #68]	; (8003ba0 <USB_FlushRxFifo+0x5c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e018      	b.n	8003b94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	daf2      	bge.n	8003b50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2210      	movs	r2, #16
 8003b72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3301      	adds	r3, #1
 8003b78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4a08      	ldr	r2, [pc, #32]	; (8003ba0 <USB_FlushRxFifo+0x5c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e006      	b.n	8003b94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b10      	cmp	r3, #16
 8003b90:	d0f0      	beq.n	8003b74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	00030d40 	.word	0x00030d40

08003ba4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	68f9      	ldr	r1, [r7, #12]
 8003bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b085      	sub	sp, #20
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003bf0:	f023 0303 	bic.w	r3, r3, #3
 8003bf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c04:	f043 0302 	orr.w	r3, r3, #2
 8003c08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0301 	and.w	r3, r3, #1
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3301      	adds	r3, #1
 8003c44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <USB_CoreReset+0x64>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e01b      	b.n	8003c8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	daf2      	bge.n	8003c40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <USB_CoreReset+0x64>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e006      	b.n	8003c8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d0f0      	beq.n	8003c6a <USB_CoreReset+0x36>

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	00030d40 	.word	0x00030d40

08003c9c <__errno>:
 8003c9c:	4b01      	ldr	r3, [pc, #4]	; (8003ca4 <__errno+0x8>)
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	2000000c 	.word	0x2000000c

08003ca8 <__libc_init_array>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	4d0d      	ldr	r5, [pc, #52]	; (8003ce0 <__libc_init_array+0x38>)
 8003cac:	4c0d      	ldr	r4, [pc, #52]	; (8003ce4 <__libc_init_array+0x3c>)
 8003cae:	1b64      	subs	r4, r4, r5
 8003cb0:	10a4      	asrs	r4, r4, #2
 8003cb2:	2600      	movs	r6, #0
 8003cb4:	42a6      	cmp	r6, r4
 8003cb6:	d109      	bne.n	8003ccc <__libc_init_array+0x24>
 8003cb8:	4d0b      	ldr	r5, [pc, #44]	; (8003ce8 <__libc_init_array+0x40>)
 8003cba:	4c0c      	ldr	r4, [pc, #48]	; (8003cec <__libc_init_array+0x44>)
 8003cbc:	f000 fc8e 	bl	80045dc <_init>
 8003cc0:	1b64      	subs	r4, r4, r5
 8003cc2:	10a4      	asrs	r4, r4, #2
 8003cc4:	2600      	movs	r6, #0
 8003cc6:	42a6      	cmp	r6, r4
 8003cc8:	d105      	bne.n	8003cd6 <__libc_init_array+0x2e>
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
 8003ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd0:	4798      	blx	r3
 8003cd2:	3601      	adds	r6, #1
 8003cd4:	e7ee      	b.n	8003cb4 <__libc_init_array+0xc>
 8003cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cda:	4798      	blx	r3
 8003cdc:	3601      	adds	r6, #1
 8003cde:	e7f2      	b.n	8003cc6 <__libc_init_array+0x1e>
 8003ce0:	080046a0 	.word	0x080046a0
 8003ce4:	080046a0 	.word	0x080046a0
 8003ce8:	080046a0 	.word	0x080046a0
 8003cec:	080046a4 	.word	0x080046a4

08003cf0 <memset>:
 8003cf0:	4402      	add	r2, r0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d100      	bne.n	8003cfa <memset+0xa>
 8003cf8:	4770      	bx	lr
 8003cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfe:	e7f9      	b.n	8003cf4 <memset+0x4>

08003d00 <_vsiprintf_r>:
 8003d00:	b500      	push	{lr}
 8003d02:	b09b      	sub	sp, #108	; 0x6c
 8003d04:	9100      	str	r1, [sp, #0]
 8003d06:	9104      	str	r1, [sp, #16]
 8003d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d0c:	9105      	str	r1, [sp, #20]
 8003d0e:	9102      	str	r1, [sp, #8]
 8003d10:	4905      	ldr	r1, [pc, #20]	; (8003d28 <_vsiprintf_r+0x28>)
 8003d12:	9103      	str	r1, [sp, #12]
 8003d14:	4669      	mov	r1, sp
 8003d16:	f000 f86f 	bl	8003df8 <_svfiprintf_r>
 8003d1a:	9b00      	ldr	r3, [sp, #0]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	b01b      	add	sp, #108	; 0x6c
 8003d22:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d26:	bf00      	nop
 8003d28:	ffff0208 	.word	0xffff0208

08003d2c <vsiprintf>:
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	460a      	mov	r2, r1
 8003d30:	4601      	mov	r1, r0
 8003d32:	4802      	ldr	r0, [pc, #8]	; (8003d3c <vsiprintf+0x10>)
 8003d34:	6800      	ldr	r0, [r0, #0]
 8003d36:	f7ff bfe3 	b.w	8003d00 <_vsiprintf_r>
 8003d3a:	bf00      	nop
 8003d3c:	2000000c 	.word	0x2000000c

08003d40 <__ssputs_r>:
 8003d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d44:	688e      	ldr	r6, [r1, #8]
 8003d46:	429e      	cmp	r6, r3
 8003d48:	4682      	mov	sl, r0
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	4690      	mov	r8, r2
 8003d4e:	461f      	mov	r7, r3
 8003d50:	d838      	bhi.n	8003dc4 <__ssputs_r+0x84>
 8003d52:	898a      	ldrh	r2, [r1, #12]
 8003d54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d58:	d032      	beq.n	8003dc0 <__ssputs_r+0x80>
 8003d5a:	6825      	ldr	r5, [r4, #0]
 8003d5c:	6909      	ldr	r1, [r1, #16]
 8003d5e:	eba5 0901 	sub.w	r9, r5, r1
 8003d62:	6965      	ldr	r5, [r4, #20]
 8003d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	444b      	add	r3, r9
 8003d70:	106d      	asrs	r5, r5, #1
 8003d72:	429d      	cmp	r5, r3
 8003d74:	bf38      	it	cc
 8003d76:	461d      	movcc	r5, r3
 8003d78:	0553      	lsls	r3, r2, #21
 8003d7a:	d531      	bpl.n	8003de0 <__ssputs_r+0xa0>
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	f000 fb63 	bl	8004448 <_malloc_r>
 8003d82:	4606      	mov	r6, r0
 8003d84:	b950      	cbnz	r0, 8003d9c <__ssputs_r+0x5c>
 8003d86:	230c      	movs	r3, #12
 8003d88:	f8ca 3000 	str.w	r3, [sl]
 8003d8c:	89a3      	ldrh	r3, [r4, #12]
 8003d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d92:	81a3      	strh	r3, [r4, #12]
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295
 8003d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9c:	6921      	ldr	r1, [r4, #16]
 8003d9e:	464a      	mov	r2, r9
 8003da0:	f000 fabe 	bl	8004320 <memcpy>
 8003da4:	89a3      	ldrh	r3, [r4, #12]
 8003da6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dae:	81a3      	strh	r3, [r4, #12]
 8003db0:	6126      	str	r6, [r4, #16]
 8003db2:	6165      	str	r5, [r4, #20]
 8003db4:	444e      	add	r6, r9
 8003db6:	eba5 0509 	sub.w	r5, r5, r9
 8003dba:	6026      	str	r6, [r4, #0]
 8003dbc:	60a5      	str	r5, [r4, #8]
 8003dbe:	463e      	mov	r6, r7
 8003dc0:	42be      	cmp	r6, r7
 8003dc2:	d900      	bls.n	8003dc6 <__ssputs_r+0x86>
 8003dc4:	463e      	mov	r6, r7
 8003dc6:	6820      	ldr	r0, [r4, #0]
 8003dc8:	4632      	mov	r2, r6
 8003dca:	4641      	mov	r1, r8
 8003dcc:	f000 fab6 	bl	800433c <memmove>
 8003dd0:	68a3      	ldr	r3, [r4, #8]
 8003dd2:	1b9b      	subs	r3, r3, r6
 8003dd4:	60a3      	str	r3, [r4, #8]
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	4433      	add	r3, r6
 8003dda:	6023      	str	r3, [r4, #0]
 8003ddc:	2000      	movs	r0, #0
 8003dde:	e7db      	b.n	8003d98 <__ssputs_r+0x58>
 8003de0:	462a      	mov	r2, r5
 8003de2:	f000 fba5 	bl	8004530 <_realloc_r>
 8003de6:	4606      	mov	r6, r0
 8003de8:	2800      	cmp	r0, #0
 8003dea:	d1e1      	bne.n	8003db0 <__ssputs_r+0x70>
 8003dec:	6921      	ldr	r1, [r4, #16]
 8003dee:	4650      	mov	r0, sl
 8003df0:	f000 fabe 	bl	8004370 <_free_r>
 8003df4:	e7c7      	b.n	8003d86 <__ssputs_r+0x46>
	...

08003df8 <_svfiprintf_r>:
 8003df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dfc:	4698      	mov	r8, r3
 8003dfe:	898b      	ldrh	r3, [r1, #12]
 8003e00:	061b      	lsls	r3, r3, #24
 8003e02:	b09d      	sub	sp, #116	; 0x74
 8003e04:	4607      	mov	r7, r0
 8003e06:	460d      	mov	r5, r1
 8003e08:	4614      	mov	r4, r2
 8003e0a:	d50e      	bpl.n	8003e2a <_svfiprintf_r+0x32>
 8003e0c:	690b      	ldr	r3, [r1, #16]
 8003e0e:	b963      	cbnz	r3, 8003e2a <_svfiprintf_r+0x32>
 8003e10:	2140      	movs	r1, #64	; 0x40
 8003e12:	f000 fb19 	bl	8004448 <_malloc_r>
 8003e16:	6028      	str	r0, [r5, #0]
 8003e18:	6128      	str	r0, [r5, #16]
 8003e1a:	b920      	cbnz	r0, 8003e26 <_svfiprintf_r+0x2e>
 8003e1c:	230c      	movs	r3, #12
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	e0d1      	b.n	8003fca <_svfiprintf_r+0x1d2>
 8003e26:	2340      	movs	r3, #64	; 0x40
 8003e28:	616b      	str	r3, [r5, #20]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2e:	2320      	movs	r3, #32
 8003e30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e38:	2330      	movs	r3, #48	; 0x30
 8003e3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003fe4 <_svfiprintf_r+0x1ec>
 8003e3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e42:	f04f 0901 	mov.w	r9, #1
 8003e46:	4623      	mov	r3, r4
 8003e48:	469a      	mov	sl, r3
 8003e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e4e:	b10a      	cbz	r2, 8003e54 <_svfiprintf_r+0x5c>
 8003e50:	2a25      	cmp	r2, #37	; 0x25
 8003e52:	d1f9      	bne.n	8003e48 <_svfiprintf_r+0x50>
 8003e54:	ebba 0b04 	subs.w	fp, sl, r4
 8003e58:	d00b      	beq.n	8003e72 <_svfiprintf_r+0x7a>
 8003e5a:	465b      	mov	r3, fp
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	4629      	mov	r1, r5
 8003e60:	4638      	mov	r0, r7
 8003e62:	f7ff ff6d 	bl	8003d40 <__ssputs_r>
 8003e66:	3001      	adds	r0, #1
 8003e68:	f000 80aa 	beq.w	8003fc0 <_svfiprintf_r+0x1c8>
 8003e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e6e:	445a      	add	r2, fp
 8003e70:	9209      	str	r2, [sp, #36]	; 0x24
 8003e72:	f89a 3000 	ldrb.w	r3, [sl]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80a2 	beq.w	8003fc0 <_svfiprintf_r+0x1c8>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e86:	f10a 0a01 	add.w	sl, sl, #1
 8003e8a:	9304      	str	r3, [sp, #16]
 8003e8c:	9307      	str	r3, [sp, #28]
 8003e8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e92:	931a      	str	r3, [sp, #104]	; 0x68
 8003e94:	4654      	mov	r4, sl
 8003e96:	2205      	movs	r2, #5
 8003e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e9c:	4851      	ldr	r0, [pc, #324]	; (8003fe4 <_svfiprintf_r+0x1ec>)
 8003e9e:	f7fc f9af 	bl	8000200 <memchr>
 8003ea2:	9a04      	ldr	r2, [sp, #16]
 8003ea4:	b9d8      	cbnz	r0, 8003ede <_svfiprintf_r+0xe6>
 8003ea6:	06d0      	lsls	r0, r2, #27
 8003ea8:	bf44      	itt	mi
 8003eaa:	2320      	movmi	r3, #32
 8003eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eb0:	0711      	lsls	r1, r2, #28
 8003eb2:	bf44      	itt	mi
 8003eb4:	232b      	movmi	r3, #43	; 0x2b
 8003eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eba:	f89a 3000 	ldrb.w	r3, [sl]
 8003ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec0:	d015      	beq.n	8003eee <_svfiprintf_r+0xf6>
 8003ec2:	9a07      	ldr	r2, [sp, #28]
 8003ec4:	4654      	mov	r4, sl
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f04f 0c0a 	mov.w	ip, #10
 8003ecc:	4621      	mov	r1, r4
 8003ece:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ed2:	3b30      	subs	r3, #48	; 0x30
 8003ed4:	2b09      	cmp	r3, #9
 8003ed6:	d94e      	bls.n	8003f76 <_svfiprintf_r+0x17e>
 8003ed8:	b1b0      	cbz	r0, 8003f08 <_svfiprintf_r+0x110>
 8003eda:	9207      	str	r2, [sp, #28]
 8003edc:	e014      	b.n	8003f08 <_svfiprintf_r+0x110>
 8003ede:	eba0 0308 	sub.w	r3, r0, r8
 8003ee2:	fa09 f303 	lsl.w	r3, r9, r3
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	9304      	str	r3, [sp, #16]
 8003eea:	46a2      	mov	sl, r4
 8003eec:	e7d2      	b.n	8003e94 <_svfiprintf_r+0x9c>
 8003eee:	9b03      	ldr	r3, [sp, #12]
 8003ef0:	1d19      	adds	r1, r3, #4
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	9103      	str	r1, [sp, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bfbb      	ittet	lt
 8003efa:	425b      	neglt	r3, r3
 8003efc:	f042 0202 	orrlt.w	r2, r2, #2
 8003f00:	9307      	strge	r3, [sp, #28]
 8003f02:	9307      	strlt	r3, [sp, #28]
 8003f04:	bfb8      	it	lt
 8003f06:	9204      	strlt	r2, [sp, #16]
 8003f08:	7823      	ldrb	r3, [r4, #0]
 8003f0a:	2b2e      	cmp	r3, #46	; 0x2e
 8003f0c:	d10c      	bne.n	8003f28 <_svfiprintf_r+0x130>
 8003f0e:	7863      	ldrb	r3, [r4, #1]
 8003f10:	2b2a      	cmp	r3, #42	; 0x2a
 8003f12:	d135      	bne.n	8003f80 <_svfiprintf_r+0x188>
 8003f14:	9b03      	ldr	r3, [sp, #12]
 8003f16:	1d1a      	adds	r2, r3, #4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	9203      	str	r2, [sp, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bfb8      	it	lt
 8003f20:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f24:	3402      	adds	r4, #2
 8003f26:	9305      	str	r3, [sp, #20]
 8003f28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ff4 <_svfiprintf_r+0x1fc>
 8003f2c:	7821      	ldrb	r1, [r4, #0]
 8003f2e:	2203      	movs	r2, #3
 8003f30:	4650      	mov	r0, sl
 8003f32:	f7fc f965 	bl	8000200 <memchr>
 8003f36:	b140      	cbz	r0, 8003f4a <_svfiprintf_r+0x152>
 8003f38:	2340      	movs	r3, #64	; 0x40
 8003f3a:	eba0 000a 	sub.w	r0, r0, sl
 8003f3e:	fa03 f000 	lsl.w	r0, r3, r0
 8003f42:	9b04      	ldr	r3, [sp, #16]
 8003f44:	4303      	orrs	r3, r0
 8003f46:	3401      	adds	r4, #1
 8003f48:	9304      	str	r3, [sp, #16]
 8003f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f4e:	4826      	ldr	r0, [pc, #152]	; (8003fe8 <_svfiprintf_r+0x1f0>)
 8003f50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f54:	2206      	movs	r2, #6
 8003f56:	f7fc f953 	bl	8000200 <memchr>
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d038      	beq.n	8003fd0 <_svfiprintf_r+0x1d8>
 8003f5e:	4b23      	ldr	r3, [pc, #140]	; (8003fec <_svfiprintf_r+0x1f4>)
 8003f60:	bb1b      	cbnz	r3, 8003faa <_svfiprintf_r+0x1b2>
 8003f62:	9b03      	ldr	r3, [sp, #12]
 8003f64:	3307      	adds	r3, #7
 8003f66:	f023 0307 	bic.w	r3, r3, #7
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	9303      	str	r3, [sp, #12]
 8003f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f70:	4433      	add	r3, r6
 8003f72:	9309      	str	r3, [sp, #36]	; 0x24
 8003f74:	e767      	b.n	8003e46 <_svfiprintf_r+0x4e>
 8003f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	e7a5      	b.n	8003ecc <_svfiprintf_r+0xd4>
 8003f80:	2300      	movs	r3, #0
 8003f82:	3401      	adds	r4, #1
 8003f84:	9305      	str	r3, [sp, #20]
 8003f86:	4619      	mov	r1, r3
 8003f88:	f04f 0c0a 	mov.w	ip, #10
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f92:	3a30      	subs	r2, #48	; 0x30
 8003f94:	2a09      	cmp	r2, #9
 8003f96:	d903      	bls.n	8003fa0 <_svfiprintf_r+0x1a8>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0c5      	beq.n	8003f28 <_svfiprintf_r+0x130>
 8003f9c:	9105      	str	r1, [sp, #20]
 8003f9e:	e7c3      	b.n	8003f28 <_svfiprintf_r+0x130>
 8003fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e7f0      	b.n	8003f8c <_svfiprintf_r+0x194>
 8003faa:	ab03      	add	r3, sp, #12
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	462a      	mov	r2, r5
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <_svfiprintf_r+0x1f8>)
 8003fb2:	a904      	add	r1, sp, #16
 8003fb4:	4638      	mov	r0, r7
 8003fb6:	f3af 8000 	nop.w
 8003fba:	1c42      	adds	r2, r0, #1
 8003fbc:	4606      	mov	r6, r0
 8003fbe:	d1d6      	bne.n	8003f6e <_svfiprintf_r+0x176>
 8003fc0:	89ab      	ldrh	r3, [r5, #12]
 8003fc2:	065b      	lsls	r3, r3, #25
 8003fc4:	f53f af2c 	bmi.w	8003e20 <_svfiprintf_r+0x28>
 8003fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fca:	b01d      	add	sp, #116	; 0x74
 8003fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd0:	ab03      	add	r3, sp, #12
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	462a      	mov	r2, r5
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <_svfiprintf_r+0x1f8>)
 8003fd8:	a904      	add	r1, sp, #16
 8003fda:	4638      	mov	r0, r7
 8003fdc:	f000 f87a 	bl	80040d4 <_printf_i>
 8003fe0:	e7eb      	b.n	8003fba <_svfiprintf_r+0x1c2>
 8003fe2:	bf00      	nop
 8003fe4:	08004664 	.word	0x08004664
 8003fe8:	0800466e 	.word	0x0800466e
 8003fec:	00000000 	.word	0x00000000
 8003ff0:	08003d41 	.word	0x08003d41
 8003ff4:	0800466a 	.word	0x0800466a

08003ff8 <_printf_common>:
 8003ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ffc:	4616      	mov	r6, r2
 8003ffe:	4699      	mov	r9, r3
 8004000:	688a      	ldr	r2, [r1, #8]
 8004002:	690b      	ldr	r3, [r1, #16]
 8004004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004008:	4293      	cmp	r3, r2
 800400a:	bfb8      	it	lt
 800400c:	4613      	movlt	r3, r2
 800400e:	6033      	str	r3, [r6, #0]
 8004010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004014:	4607      	mov	r7, r0
 8004016:	460c      	mov	r4, r1
 8004018:	b10a      	cbz	r2, 800401e <_printf_common+0x26>
 800401a:	3301      	adds	r3, #1
 800401c:	6033      	str	r3, [r6, #0]
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	0699      	lsls	r1, r3, #26
 8004022:	bf42      	ittt	mi
 8004024:	6833      	ldrmi	r3, [r6, #0]
 8004026:	3302      	addmi	r3, #2
 8004028:	6033      	strmi	r3, [r6, #0]
 800402a:	6825      	ldr	r5, [r4, #0]
 800402c:	f015 0506 	ands.w	r5, r5, #6
 8004030:	d106      	bne.n	8004040 <_printf_common+0x48>
 8004032:	f104 0a19 	add.w	sl, r4, #25
 8004036:	68e3      	ldr	r3, [r4, #12]
 8004038:	6832      	ldr	r2, [r6, #0]
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	42ab      	cmp	r3, r5
 800403e:	dc26      	bgt.n	800408e <_printf_common+0x96>
 8004040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004044:	1e13      	subs	r3, r2, #0
 8004046:	6822      	ldr	r2, [r4, #0]
 8004048:	bf18      	it	ne
 800404a:	2301      	movne	r3, #1
 800404c:	0692      	lsls	r2, r2, #26
 800404e:	d42b      	bmi.n	80040a8 <_printf_common+0xb0>
 8004050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004054:	4649      	mov	r1, r9
 8004056:	4638      	mov	r0, r7
 8004058:	47c0      	blx	r8
 800405a:	3001      	adds	r0, #1
 800405c:	d01e      	beq.n	800409c <_printf_common+0xa4>
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	68e5      	ldr	r5, [r4, #12]
 8004062:	6832      	ldr	r2, [r6, #0]
 8004064:	f003 0306 	and.w	r3, r3, #6
 8004068:	2b04      	cmp	r3, #4
 800406a:	bf08      	it	eq
 800406c:	1aad      	subeq	r5, r5, r2
 800406e:	68a3      	ldr	r3, [r4, #8]
 8004070:	6922      	ldr	r2, [r4, #16]
 8004072:	bf0c      	ite	eq
 8004074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004078:	2500      	movne	r5, #0
 800407a:	4293      	cmp	r3, r2
 800407c:	bfc4      	itt	gt
 800407e:	1a9b      	subgt	r3, r3, r2
 8004080:	18ed      	addgt	r5, r5, r3
 8004082:	2600      	movs	r6, #0
 8004084:	341a      	adds	r4, #26
 8004086:	42b5      	cmp	r5, r6
 8004088:	d11a      	bne.n	80040c0 <_printf_common+0xc8>
 800408a:	2000      	movs	r0, #0
 800408c:	e008      	b.n	80040a0 <_printf_common+0xa8>
 800408e:	2301      	movs	r3, #1
 8004090:	4652      	mov	r2, sl
 8004092:	4649      	mov	r1, r9
 8004094:	4638      	mov	r0, r7
 8004096:	47c0      	blx	r8
 8004098:	3001      	adds	r0, #1
 800409a:	d103      	bne.n	80040a4 <_printf_common+0xac>
 800409c:	f04f 30ff 	mov.w	r0, #4294967295
 80040a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a4:	3501      	adds	r5, #1
 80040a6:	e7c6      	b.n	8004036 <_printf_common+0x3e>
 80040a8:	18e1      	adds	r1, r4, r3
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	2030      	movs	r0, #48	; 0x30
 80040ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040b2:	4422      	add	r2, r4
 80040b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040bc:	3302      	adds	r3, #2
 80040be:	e7c7      	b.n	8004050 <_printf_common+0x58>
 80040c0:	2301      	movs	r3, #1
 80040c2:	4622      	mov	r2, r4
 80040c4:	4649      	mov	r1, r9
 80040c6:	4638      	mov	r0, r7
 80040c8:	47c0      	blx	r8
 80040ca:	3001      	adds	r0, #1
 80040cc:	d0e6      	beq.n	800409c <_printf_common+0xa4>
 80040ce:	3601      	adds	r6, #1
 80040d0:	e7d9      	b.n	8004086 <_printf_common+0x8e>
	...

080040d4 <_printf_i>:
 80040d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040d8:	7e0f      	ldrb	r7, [r1, #24]
 80040da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040dc:	2f78      	cmp	r7, #120	; 0x78
 80040de:	4691      	mov	r9, r2
 80040e0:	4680      	mov	r8, r0
 80040e2:	460c      	mov	r4, r1
 80040e4:	469a      	mov	sl, r3
 80040e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040ea:	d807      	bhi.n	80040fc <_printf_i+0x28>
 80040ec:	2f62      	cmp	r7, #98	; 0x62
 80040ee:	d80a      	bhi.n	8004106 <_printf_i+0x32>
 80040f0:	2f00      	cmp	r7, #0
 80040f2:	f000 80d8 	beq.w	80042a6 <_printf_i+0x1d2>
 80040f6:	2f58      	cmp	r7, #88	; 0x58
 80040f8:	f000 80a3 	beq.w	8004242 <_printf_i+0x16e>
 80040fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004104:	e03a      	b.n	800417c <_printf_i+0xa8>
 8004106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800410a:	2b15      	cmp	r3, #21
 800410c:	d8f6      	bhi.n	80040fc <_printf_i+0x28>
 800410e:	a101      	add	r1, pc, #4	; (adr r1, 8004114 <_printf_i+0x40>)
 8004110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004114:	0800416d 	.word	0x0800416d
 8004118:	08004181 	.word	0x08004181
 800411c:	080040fd 	.word	0x080040fd
 8004120:	080040fd 	.word	0x080040fd
 8004124:	080040fd 	.word	0x080040fd
 8004128:	080040fd 	.word	0x080040fd
 800412c:	08004181 	.word	0x08004181
 8004130:	080040fd 	.word	0x080040fd
 8004134:	080040fd 	.word	0x080040fd
 8004138:	080040fd 	.word	0x080040fd
 800413c:	080040fd 	.word	0x080040fd
 8004140:	0800428d 	.word	0x0800428d
 8004144:	080041b1 	.word	0x080041b1
 8004148:	0800426f 	.word	0x0800426f
 800414c:	080040fd 	.word	0x080040fd
 8004150:	080040fd 	.word	0x080040fd
 8004154:	080042af 	.word	0x080042af
 8004158:	080040fd 	.word	0x080040fd
 800415c:	080041b1 	.word	0x080041b1
 8004160:	080040fd 	.word	0x080040fd
 8004164:	080040fd 	.word	0x080040fd
 8004168:	08004277 	.word	0x08004277
 800416c:	682b      	ldr	r3, [r5, #0]
 800416e:	1d1a      	adds	r2, r3, #4
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	602a      	str	r2, [r5, #0]
 8004174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800417c:	2301      	movs	r3, #1
 800417e:	e0a3      	b.n	80042c8 <_printf_i+0x1f4>
 8004180:	6820      	ldr	r0, [r4, #0]
 8004182:	6829      	ldr	r1, [r5, #0]
 8004184:	0606      	lsls	r6, r0, #24
 8004186:	f101 0304 	add.w	r3, r1, #4
 800418a:	d50a      	bpl.n	80041a2 <_printf_i+0xce>
 800418c:	680e      	ldr	r6, [r1, #0]
 800418e:	602b      	str	r3, [r5, #0]
 8004190:	2e00      	cmp	r6, #0
 8004192:	da03      	bge.n	800419c <_printf_i+0xc8>
 8004194:	232d      	movs	r3, #45	; 0x2d
 8004196:	4276      	negs	r6, r6
 8004198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800419c:	485e      	ldr	r0, [pc, #376]	; (8004318 <_printf_i+0x244>)
 800419e:	230a      	movs	r3, #10
 80041a0:	e019      	b.n	80041d6 <_printf_i+0x102>
 80041a2:	680e      	ldr	r6, [r1, #0]
 80041a4:	602b      	str	r3, [r5, #0]
 80041a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041aa:	bf18      	it	ne
 80041ac:	b236      	sxthne	r6, r6
 80041ae:	e7ef      	b.n	8004190 <_printf_i+0xbc>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	6820      	ldr	r0, [r4, #0]
 80041b4:	1d19      	adds	r1, r3, #4
 80041b6:	6029      	str	r1, [r5, #0]
 80041b8:	0601      	lsls	r1, r0, #24
 80041ba:	d501      	bpl.n	80041c0 <_printf_i+0xec>
 80041bc:	681e      	ldr	r6, [r3, #0]
 80041be:	e002      	b.n	80041c6 <_printf_i+0xf2>
 80041c0:	0646      	lsls	r6, r0, #25
 80041c2:	d5fb      	bpl.n	80041bc <_printf_i+0xe8>
 80041c4:	881e      	ldrh	r6, [r3, #0]
 80041c6:	4854      	ldr	r0, [pc, #336]	; (8004318 <_printf_i+0x244>)
 80041c8:	2f6f      	cmp	r7, #111	; 0x6f
 80041ca:	bf0c      	ite	eq
 80041cc:	2308      	moveq	r3, #8
 80041ce:	230a      	movne	r3, #10
 80041d0:	2100      	movs	r1, #0
 80041d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041d6:	6865      	ldr	r5, [r4, #4]
 80041d8:	60a5      	str	r5, [r4, #8]
 80041da:	2d00      	cmp	r5, #0
 80041dc:	bfa2      	ittt	ge
 80041de:	6821      	ldrge	r1, [r4, #0]
 80041e0:	f021 0104 	bicge.w	r1, r1, #4
 80041e4:	6021      	strge	r1, [r4, #0]
 80041e6:	b90e      	cbnz	r6, 80041ec <_printf_i+0x118>
 80041e8:	2d00      	cmp	r5, #0
 80041ea:	d04d      	beq.n	8004288 <_printf_i+0x1b4>
 80041ec:	4615      	mov	r5, r2
 80041ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80041f2:	fb03 6711 	mls	r7, r3, r1, r6
 80041f6:	5dc7      	ldrb	r7, [r0, r7]
 80041f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041fc:	4637      	mov	r7, r6
 80041fe:	42bb      	cmp	r3, r7
 8004200:	460e      	mov	r6, r1
 8004202:	d9f4      	bls.n	80041ee <_printf_i+0x11a>
 8004204:	2b08      	cmp	r3, #8
 8004206:	d10b      	bne.n	8004220 <_printf_i+0x14c>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	07de      	lsls	r6, r3, #31
 800420c:	d508      	bpl.n	8004220 <_printf_i+0x14c>
 800420e:	6923      	ldr	r3, [r4, #16]
 8004210:	6861      	ldr	r1, [r4, #4]
 8004212:	4299      	cmp	r1, r3
 8004214:	bfde      	ittt	le
 8004216:	2330      	movle	r3, #48	; 0x30
 8004218:	f805 3c01 	strble.w	r3, [r5, #-1]
 800421c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004220:	1b52      	subs	r2, r2, r5
 8004222:	6122      	str	r2, [r4, #16]
 8004224:	f8cd a000 	str.w	sl, [sp]
 8004228:	464b      	mov	r3, r9
 800422a:	aa03      	add	r2, sp, #12
 800422c:	4621      	mov	r1, r4
 800422e:	4640      	mov	r0, r8
 8004230:	f7ff fee2 	bl	8003ff8 <_printf_common>
 8004234:	3001      	adds	r0, #1
 8004236:	d14c      	bne.n	80042d2 <_printf_i+0x1fe>
 8004238:	f04f 30ff 	mov.w	r0, #4294967295
 800423c:	b004      	add	sp, #16
 800423e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004242:	4835      	ldr	r0, [pc, #212]	; (8004318 <_printf_i+0x244>)
 8004244:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004248:	6829      	ldr	r1, [r5, #0]
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004250:	6029      	str	r1, [r5, #0]
 8004252:	061d      	lsls	r5, r3, #24
 8004254:	d514      	bpl.n	8004280 <_printf_i+0x1ac>
 8004256:	07df      	lsls	r7, r3, #31
 8004258:	bf44      	itt	mi
 800425a:	f043 0320 	orrmi.w	r3, r3, #32
 800425e:	6023      	strmi	r3, [r4, #0]
 8004260:	b91e      	cbnz	r6, 800426a <_printf_i+0x196>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	f023 0320 	bic.w	r3, r3, #32
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	2310      	movs	r3, #16
 800426c:	e7b0      	b.n	80041d0 <_printf_i+0xfc>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	f043 0320 	orr.w	r3, r3, #32
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	2378      	movs	r3, #120	; 0x78
 8004278:	4828      	ldr	r0, [pc, #160]	; (800431c <_printf_i+0x248>)
 800427a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800427e:	e7e3      	b.n	8004248 <_printf_i+0x174>
 8004280:	0659      	lsls	r1, r3, #25
 8004282:	bf48      	it	mi
 8004284:	b2b6      	uxthmi	r6, r6
 8004286:	e7e6      	b.n	8004256 <_printf_i+0x182>
 8004288:	4615      	mov	r5, r2
 800428a:	e7bb      	b.n	8004204 <_printf_i+0x130>
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	6826      	ldr	r6, [r4, #0]
 8004290:	6961      	ldr	r1, [r4, #20]
 8004292:	1d18      	adds	r0, r3, #4
 8004294:	6028      	str	r0, [r5, #0]
 8004296:	0635      	lsls	r5, r6, #24
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	d501      	bpl.n	80042a0 <_printf_i+0x1cc>
 800429c:	6019      	str	r1, [r3, #0]
 800429e:	e002      	b.n	80042a6 <_printf_i+0x1d2>
 80042a0:	0670      	lsls	r0, r6, #25
 80042a2:	d5fb      	bpl.n	800429c <_printf_i+0x1c8>
 80042a4:	8019      	strh	r1, [r3, #0]
 80042a6:	2300      	movs	r3, #0
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	4615      	mov	r5, r2
 80042ac:	e7ba      	b.n	8004224 <_printf_i+0x150>
 80042ae:	682b      	ldr	r3, [r5, #0]
 80042b0:	1d1a      	adds	r2, r3, #4
 80042b2:	602a      	str	r2, [r5, #0]
 80042b4:	681d      	ldr	r5, [r3, #0]
 80042b6:	6862      	ldr	r2, [r4, #4]
 80042b8:	2100      	movs	r1, #0
 80042ba:	4628      	mov	r0, r5
 80042bc:	f7fb ffa0 	bl	8000200 <memchr>
 80042c0:	b108      	cbz	r0, 80042c6 <_printf_i+0x1f2>
 80042c2:	1b40      	subs	r0, r0, r5
 80042c4:	6060      	str	r0, [r4, #4]
 80042c6:	6863      	ldr	r3, [r4, #4]
 80042c8:	6123      	str	r3, [r4, #16]
 80042ca:	2300      	movs	r3, #0
 80042cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042d0:	e7a8      	b.n	8004224 <_printf_i+0x150>
 80042d2:	6923      	ldr	r3, [r4, #16]
 80042d4:	462a      	mov	r2, r5
 80042d6:	4649      	mov	r1, r9
 80042d8:	4640      	mov	r0, r8
 80042da:	47d0      	blx	sl
 80042dc:	3001      	adds	r0, #1
 80042de:	d0ab      	beq.n	8004238 <_printf_i+0x164>
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	079b      	lsls	r3, r3, #30
 80042e4:	d413      	bmi.n	800430e <_printf_i+0x23a>
 80042e6:	68e0      	ldr	r0, [r4, #12]
 80042e8:	9b03      	ldr	r3, [sp, #12]
 80042ea:	4298      	cmp	r0, r3
 80042ec:	bfb8      	it	lt
 80042ee:	4618      	movlt	r0, r3
 80042f0:	e7a4      	b.n	800423c <_printf_i+0x168>
 80042f2:	2301      	movs	r3, #1
 80042f4:	4632      	mov	r2, r6
 80042f6:	4649      	mov	r1, r9
 80042f8:	4640      	mov	r0, r8
 80042fa:	47d0      	blx	sl
 80042fc:	3001      	adds	r0, #1
 80042fe:	d09b      	beq.n	8004238 <_printf_i+0x164>
 8004300:	3501      	adds	r5, #1
 8004302:	68e3      	ldr	r3, [r4, #12]
 8004304:	9903      	ldr	r1, [sp, #12]
 8004306:	1a5b      	subs	r3, r3, r1
 8004308:	42ab      	cmp	r3, r5
 800430a:	dcf2      	bgt.n	80042f2 <_printf_i+0x21e>
 800430c:	e7eb      	b.n	80042e6 <_printf_i+0x212>
 800430e:	2500      	movs	r5, #0
 8004310:	f104 0619 	add.w	r6, r4, #25
 8004314:	e7f5      	b.n	8004302 <_printf_i+0x22e>
 8004316:	bf00      	nop
 8004318:	08004675 	.word	0x08004675
 800431c:	08004686 	.word	0x08004686

08004320 <memcpy>:
 8004320:	440a      	add	r2, r1
 8004322:	4291      	cmp	r1, r2
 8004324:	f100 33ff 	add.w	r3, r0, #4294967295
 8004328:	d100      	bne.n	800432c <memcpy+0xc>
 800432a:	4770      	bx	lr
 800432c:	b510      	push	{r4, lr}
 800432e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004332:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004336:	4291      	cmp	r1, r2
 8004338:	d1f9      	bne.n	800432e <memcpy+0xe>
 800433a:	bd10      	pop	{r4, pc}

0800433c <memmove>:
 800433c:	4288      	cmp	r0, r1
 800433e:	b510      	push	{r4, lr}
 8004340:	eb01 0402 	add.w	r4, r1, r2
 8004344:	d902      	bls.n	800434c <memmove+0x10>
 8004346:	4284      	cmp	r4, r0
 8004348:	4623      	mov	r3, r4
 800434a:	d807      	bhi.n	800435c <memmove+0x20>
 800434c:	1e43      	subs	r3, r0, #1
 800434e:	42a1      	cmp	r1, r4
 8004350:	d008      	beq.n	8004364 <memmove+0x28>
 8004352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800435a:	e7f8      	b.n	800434e <memmove+0x12>
 800435c:	4402      	add	r2, r0
 800435e:	4601      	mov	r1, r0
 8004360:	428a      	cmp	r2, r1
 8004362:	d100      	bne.n	8004366 <memmove+0x2a>
 8004364:	bd10      	pop	{r4, pc}
 8004366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800436a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800436e:	e7f7      	b.n	8004360 <memmove+0x24>

08004370 <_free_r>:
 8004370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004372:	2900      	cmp	r1, #0
 8004374:	d044      	beq.n	8004400 <_free_r+0x90>
 8004376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800437a:	9001      	str	r0, [sp, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f1a1 0404 	sub.w	r4, r1, #4
 8004382:	bfb8      	it	lt
 8004384:	18e4      	addlt	r4, r4, r3
 8004386:	f000 f913 	bl	80045b0 <__malloc_lock>
 800438a:	4a1e      	ldr	r2, [pc, #120]	; (8004404 <_free_r+0x94>)
 800438c:	9801      	ldr	r0, [sp, #4]
 800438e:	6813      	ldr	r3, [r2, #0]
 8004390:	b933      	cbnz	r3, 80043a0 <_free_r+0x30>
 8004392:	6063      	str	r3, [r4, #4]
 8004394:	6014      	str	r4, [r2, #0]
 8004396:	b003      	add	sp, #12
 8004398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800439c:	f000 b90e 	b.w	80045bc <__malloc_unlock>
 80043a0:	42a3      	cmp	r3, r4
 80043a2:	d908      	bls.n	80043b6 <_free_r+0x46>
 80043a4:	6825      	ldr	r5, [r4, #0]
 80043a6:	1961      	adds	r1, r4, r5
 80043a8:	428b      	cmp	r3, r1
 80043aa:	bf01      	itttt	eq
 80043ac:	6819      	ldreq	r1, [r3, #0]
 80043ae:	685b      	ldreq	r3, [r3, #4]
 80043b0:	1949      	addeq	r1, r1, r5
 80043b2:	6021      	streq	r1, [r4, #0]
 80043b4:	e7ed      	b.n	8004392 <_free_r+0x22>
 80043b6:	461a      	mov	r2, r3
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	b10b      	cbz	r3, 80043c0 <_free_r+0x50>
 80043bc:	42a3      	cmp	r3, r4
 80043be:	d9fa      	bls.n	80043b6 <_free_r+0x46>
 80043c0:	6811      	ldr	r1, [r2, #0]
 80043c2:	1855      	adds	r5, r2, r1
 80043c4:	42a5      	cmp	r5, r4
 80043c6:	d10b      	bne.n	80043e0 <_free_r+0x70>
 80043c8:	6824      	ldr	r4, [r4, #0]
 80043ca:	4421      	add	r1, r4
 80043cc:	1854      	adds	r4, r2, r1
 80043ce:	42a3      	cmp	r3, r4
 80043d0:	6011      	str	r1, [r2, #0]
 80043d2:	d1e0      	bne.n	8004396 <_free_r+0x26>
 80043d4:	681c      	ldr	r4, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	6053      	str	r3, [r2, #4]
 80043da:	4421      	add	r1, r4
 80043dc:	6011      	str	r1, [r2, #0]
 80043de:	e7da      	b.n	8004396 <_free_r+0x26>
 80043e0:	d902      	bls.n	80043e8 <_free_r+0x78>
 80043e2:	230c      	movs	r3, #12
 80043e4:	6003      	str	r3, [r0, #0]
 80043e6:	e7d6      	b.n	8004396 <_free_r+0x26>
 80043e8:	6825      	ldr	r5, [r4, #0]
 80043ea:	1961      	adds	r1, r4, r5
 80043ec:	428b      	cmp	r3, r1
 80043ee:	bf04      	itt	eq
 80043f0:	6819      	ldreq	r1, [r3, #0]
 80043f2:	685b      	ldreq	r3, [r3, #4]
 80043f4:	6063      	str	r3, [r4, #4]
 80043f6:	bf04      	itt	eq
 80043f8:	1949      	addeq	r1, r1, r5
 80043fa:	6021      	streq	r1, [r4, #0]
 80043fc:	6054      	str	r4, [r2, #4]
 80043fe:	e7ca      	b.n	8004396 <_free_r+0x26>
 8004400:	b003      	add	sp, #12
 8004402:	bd30      	pop	{r4, r5, pc}
 8004404:	20000624 	.word	0x20000624

08004408 <sbrk_aligned>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	4e0e      	ldr	r6, [pc, #56]	; (8004444 <sbrk_aligned+0x3c>)
 800440c:	460c      	mov	r4, r1
 800440e:	6831      	ldr	r1, [r6, #0]
 8004410:	4605      	mov	r5, r0
 8004412:	b911      	cbnz	r1, 800441a <sbrk_aligned+0x12>
 8004414:	f000 f8bc 	bl	8004590 <_sbrk_r>
 8004418:	6030      	str	r0, [r6, #0]
 800441a:	4621      	mov	r1, r4
 800441c:	4628      	mov	r0, r5
 800441e:	f000 f8b7 	bl	8004590 <_sbrk_r>
 8004422:	1c43      	adds	r3, r0, #1
 8004424:	d00a      	beq.n	800443c <sbrk_aligned+0x34>
 8004426:	1cc4      	adds	r4, r0, #3
 8004428:	f024 0403 	bic.w	r4, r4, #3
 800442c:	42a0      	cmp	r0, r4
 800442e:	d007      	beq.n	8004440 <sbrk_aligned+0x38>
 8004430:	1a21      	subs	r1, r4, r0
 8004432:	4628      	mov	r0, r5
 8004434:	f000 f8ac 	bl	8004590 <_sbrk_r>
 8004438:	3001      	adds	r0, #1
 800443a:	d101      	bne.n	8004440 <sbrk_aligned+0x38>
 800443c:	f04f 34ff 	mov.w	r4, #4294967295
 8004440:	4620      	mov	r0, r4
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	20000628 	.word	0x20000628

08004448 <_malloc_r>:
 8004448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800444c:	1ccd      	adds	r5, r1, #3
 800444e:	f025 0503 	bic.w	r5, r5, #3
 8004452:	3508      	adds	r5, #8
 8004454:	2d0c      	cmp	r5, #12
 8004456:	bf38      	it	cc
 8004458:	250c      	movcc	r5, #12
 800445a:	2d00      	cmp	r5, #0
 800445c:	4607      	mov	r7, r0
 800445e:	db01      	blt.n	8004464 <_malloc_r+0x1c>
 8004460:	42a9      	cmp	r1, r5
 8004462:	d905      	bls.n	8004470 <_malloc_r+0x28>
 8004464:	230c      	movs	r3, #12
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	2600      	movs	r6, #0
 800446a:	4630      	mov	r0, r6
 800446c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004470:	4e2e      	ldr	r6, [pc, #184]	; (800452c <_malloc_r+0xe4>)
 8004472:	f000 f89d 	bl	80045b0 <__malloc_lock>
 8004476:	6833      	ldr	r3, [r6, #0]
 8004478:	461c      	mov	r4, r3
 800447a:	bb34      	cbnz	r4, 80044ca <_malloc_r+0x82>
 800447c:	4629      	mov	r1, r5
 800447e:	4638      	mov	r0, r7
 8004480:	f7ff ffc2 	bl	8004408 <sbrk_aligned>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	4604      	mov	r4, r0
 8004488:	d14d      	bne.n	8004526 <_malloc_r+0xde>
 800448a:	6834      	ldr	r4, [r6, #0]
 800448c:	4626      	mov	r6, r4
 800448e:	2e00      	cmp	r6, #0
 8004490:	d140      	bne.n	8004514 <_malloc_r+0xcc>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	4631      	mov	r1, r6
 8004496:	4638      	mov	r0, r7
 8004498:	eb04 0803 	add.w	r8, r4, r3
 800449c:	f000 f878 	bl	8004590 <_sbrk_r>
 80044a0:	4580      	cmp	r8, r0
 80044a2:	d13a      	bne.n	800451a <_malloc_r+0xd2>
 80044a4:	6821      	ldr	r1, [r4, #0]
 80044a6:	3503      	adds	r5, #3
 80044a8:	1a6d      	subs	r5, r5, r1
 80044aa:	f025 0503 	bic.w	r5, r5, #3
 80044ae:	3508      	adds	r5, #8
 80044b0:	2d0c      	cmp	r5, #12
 80044b2:	bf38      	it	cc
 80044b4:	250c      	movcc	r5, #12
 80044b6:	4629      	mov	r1, r5
 80044b8:	4638      	mov	r0, r7
 80044ba:	f7ff ffa5 	bl	8004408 <sbrk_aligned>
 80044be:	3001      	adds	r0, #1
 80044c0:	d02b      	beq.n	800451a <_malloc_r+0xd2>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	442b      	add	r3, r5
 80044c6:	6023      	str	r3, [r4, #0]
 80044c8:	e00e      	b.n	80044e8 <_malloc_r+0xa0>
 80044ca:	6822      	ldr	r2, [r4, #0]
 80044cc:	1b52      	subs	r2, r2, r5
 80044ce:	d41e      	bmi.n	800450e <_malloc_r+0xc6>
 80044d0:	2a0b      	cmp	r2, #11
 80044d2:	d916      	bls.n	8004502 <_malloc_r+0xba>
 80044d4:	1961      	adds	r1, r4, r5
 80044d6:	42a3      	cmp	r3, r4
 80044d8:	6025      	str	r5, [r4, #0]
 80044da:	bf18      	it	ne
 80044dc:	6059      	strne	r1, [r3, #4]
 80044de:	6863      	ldr	r3, [r4, #4]
 80044e0:	bf08      	it	eq
 80044e2:	6031      	streq	r1, [r6, #0]
 80044e4:	5162      	str	r2, [r4, r5]
 80044e6:	604b      	str	r3, [r1, #4]
 80044e8:	4638      	mov	r0, r7
 80044ea:	f104 060b 	add.w	r6, r4, #11
 80044ee:	f000 f865 	bl	80045bc <__malloc_unlock>
 80044f2:	f026 0607 	bic.w	r6, r6, #7
 80044f6:	1d23      	adds	r3, r4, #4
 80044f8:	1af2      	subs	r2, r6, r3
 80044fa:	d0b6      	beq.n	800446a <_malloc_r+0x22>
 80044fc:	1b9b      	subs	r3, r3, r6
 80044fe:	50a3      	str	r3, [r4, r2]
 8004500:	e7b3      	b.n	800446a <_malloc_r+0x22>
 8004502:	6862      	ldr	r2, [r4, #4]
 8004504:	42a3      	cmp	r3, r4
 8004506:	bf0c      	ite	eq
 8004508:	6032      	streq	r2, [r6, #0]
 800450a:	605a      	strne	r2, [r3, #4]
 800450c:	e7ec      	b.n	80044e8 <_malloc_r+0xa0>
 800450e:	4623      	mov	r3, r4
 8004510:	6864      	ldr	r4, [r4, #4]
 8004512:	e7b2      	b.n	800447a <_malloc_r+0x32>
 8004514:	4634      	mov	r4, r6
 8004516:	6876      	ldr	r6, [r6, #4]
 8004518:	e7b9      	b.n	800448e <_malloc_r+0x46>
 800451a:	230c      	movs	r3, #12
 800451c:	603b      	str	r3, [r7, #0]
 800451e:	4638      	mov	r0, r7
 8004520:	f000 f84c 	bl	80045bc <__malloc_unlock>
 8004524:	e7a1      	b.n	800446a <_malloc_r+0x22>
 8004526:	6025      	str	r5, [r4, #0]
 8004528:	e7de      	b.n	80044e8 <_malloc_r+0xa0>
 800452a:	bf00      	nop
 800452c:	20000624 	.word	0x20000624

08004530 <_realloc_r>:
 8004530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004534:	4680      	mov	r8, r0
 8004536:	4614      	mov	r4, r2
 8004538:	460e      	mov	r6, r1
 800453a:	b921      	cbnz	r1, 8004546 <_realloc_r+0x16>
 800453c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004540:	4611      	mov	r1, r2
 8004542:	f7ff bf81 	b.w	8004448 <_malloc_r>
 8004546:	b92a      	cbnz	r2, 8004554 <_realloc_r+0x24>
 8004548:	f7ff ff12 	bl	8004370 <_free_r>
 800454c:	4625      	mov	r5, r4
 800454e:	4628      	mov	r0, r5
 8004550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004554:	f000 f838 	bl	80045c8 <_malloc_usable_size_r>
 8004558:	4284      	cmp	r4, r0
 800455a:	4607      	mov	r7, r0
 800455c:	d802      	bhi.n	8004564 <_realloc_r+0x34>
 800455e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004562:	d812      	bhi.n	800458a <_realloc_r+0x5a>
 8004564:	4621      	mov	r1, r4
 8004566:	4640      	mov	r0, r8
 8004568:	f7ff ff6e 	bl	8004448 <_malloc_r>
 800456c:	4605      	mov	r5, r0
 800456e:	2800      	cmp	r0, #0
 8004570:	d0ed      	beq.n	800454e <_realloc_r+0x1e>
 8004572:	42bc      	cmp	r4, r7
 8004574:	4622      	mov	r2, r4
 8004576:	4631      	mov	r1, r6
 8004578:	bf28      	it	cs
 800457a:	463a      	movcs	r2, r7
 800457c:	f7ff fed0 	bl	8004320 <memcpy>
 8004580:	4631      	mov	r1, r6
 8004582:	4640      	mov	r0, r8
 8004584:	f7ff fef4 	bl	8004370 <_free_r>
 8004588:	e7e1      	b.n	800454e <_realloc_r+0x1e>
 800458a:	4635      	mov	r5, r6
 800458c:	e7df      	b.n	800454e <_realloc_r+0x1e>
	...

08004590 <_sbrk_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4d06      	ldr	r5, [pc, #24]	; (80045ac <_sbrk_r+0x1c>)
 8004594:	2300      	movs	r3, #0
 8004596:	4604      	mov	r4, r0
 8004598:	4608      	mov	r0, r1
 800459a:	602b      	str	r3, [r5, #0]
 800459c:	f7fc fac8 	bl	8000b30 <_sbrk>
 80045a0:	1c43      	adds	r3, r0, #1
 80045a2:	d102      	bne.n	80045aa <_sbrk_r+0x1a>
 80045a4:	682b      	ldr	r3, [r5, #0]
 80045a6:	b103      	cbz	r3, 80045aa <_sbrk_r+0x1a>
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	bd38      	pop	{r3, r4, r5, pc}
 80045ac:	2000062c 	.word	0x2000062c

080045b0 <__malloc_lock>:
 80045b0:	4801      	ldr	r0, [pc, #4]	; (80045b8 <__malloc_lock+0x8>)
 80045b2:	f000 b811 	b.w	80045d8 <__retarget_lock_acquire_recursive>
 80045b6:	bf00      	nop
 80045b8:	20000630 	.word	0x20000630

080045bc <__malloc_unlock>:
 80045bc:	4801      	ldr	r0, [pc, #4]	; (80045c4 <__malloc_unlock+0x8>)
 80045be:	f000 b80c 	b.w	80045da <__retarget_lock_release_recursive>
 80045c2:	bf00      	nop
 80045c4:	20000630 	.word	0x20000630

080045c8 <_malloc_usable_size_r>:
 80045c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045cc:	1f18      	subs	r0, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bfbc      	itt	lt
 80045d2:	580b      	ldrlt	r3, [r1, r0]
 80045d4:	18c0      	addlt	r0, r0, r3
 80045d6:	4770      	bx	lr

080045d8 <__retarget_lock_acquire_recursive>:
 80045d8:	4770      	bx	lr

080045da <__retarget_lock_release_recursive>:
 80045da:	4770      	bx	lr

080045dc <_init>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	bf00      	nop
 80045e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e2:	bc08      	pop	{r3}
 80045e4:	469e      	mov	lr, r3
 80045e6:	4770      	bx	lr

080045e8 <_fini>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	bf00      	nop
 80045ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ee:	bc08      	pop	{r3}
 80045f0:	469e      	mov	lr, r3
 80045f2:	4770      	bx	lr
